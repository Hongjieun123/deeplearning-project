{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"(200407)CNN_example_3_1(first conv layer 2x2, second conv layer 2x2 , stride = 2x2 filter num = 32,32","provenance":[{"file_id":"1fhJIvafuijMAZv6GXsW6iMXQPKJyGG80","timestamp":1586261411265}],"authorship_tag":"ABX9TyP/PjLDh8sSE8i79rdZ0Lyu"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"-_LzEheGs6ro","colab_type":"code","outputId":"cc5886b8-2028-402f-d9cd-dc546c5f32fb","executionInfo":{"status":"ok","timestamp":1586261438255,"user_tz":-540,"elapsed":1194,"user":{"displayName":"봉인바지","photoUrl":"","userId":"15851653315678273272"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["%tensorflow_version 1.x"],"execution_count":1,"outputs":[{"output_type":"stream","text":["TensorFlow 1.x selected.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"0iy8V0dx22K7","colab_type":"code","outputId":"f46aba7f-8abb-4e88-b5a9-fec328a9091f","executionInfo":{"status":"ok","timestamp":1586261445013,"user_tz":-540,"elapsed":7905,"user":{"displayName":"봉인바지","photoUrl":"","userId":"15851653315678273272"}},"colab":{"base_uri":"https://localhost:8080/","height":685}},"source":["import tensorflow as tf\n","from tensorflow.examples.tutorials.mnist import input_data\n","import numpy as np\n","from datetime import datetime      # datetime.now() 를 이용하여 학습 경과 시간 측정\n","\n","# read_data_sets() 를 통해 데이터를 객체형태로 받아오고\n","# one_hot 옵션을 통해 정답(label) 을 one-hot 인코딩된 형태로 받아옴\n","\n","mnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n","\n","# mnist 데이터 셋은 train, test, validation 3개의 데이터 셋으로 구성되어 있으며.\n","# num_examples 값을 통해 데이터의 갯수 확인 가능함\n","\n","print(\"\\n\", mnist.train.num_examples, mnist.test.num_examples, mnist.validation.num_examples)\n","\n","# 데이터는 784(28x28)개의 픽셀을 가지는 이미지와\n","# 10(0~9)개 클래스를 가지는 one-hot 인코딩된 레이블(정답)을 가지고 있음\n","\n","print(\"\\ntrain image shape = \", np.shape(mnist.train.images))\n","print(\"train label shape = \", np.shape(mnist.train.labels))\n","print(\"test image shape = \", np.shape(mnist.test.images))\n","print(\"test label shape = \", np.shape(mnist.test.labels))"],"execution_count":2,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From <ipython-input-2-37edfc5623ff>:9: read_data_sets (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use alternatives such as official/mnist/dataset.py from tensorflow/models.\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/mnist.py:260: maybe_download (from tensorflow.contrib.learn.python.learn.datasets.base) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please write your own downloading logic.\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/base.py:252: _internal_retry.<locals>.wrap.<locals>.wrapped_fn (from tensorflow.contrib.learn.python.learn.datasets.base) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use urllib or similar directly.\n","Successfully downloaded train-images-idx3-ubyte.gz 9912422 bytes.\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/mnist.py:262: extract_images (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use tf.data to implement this functionality.\n","Extracting MNIST_data/train-images-idx3-ubyte.gz\n","Successfully downloaded train-labels-idx1-ubyte.gz 28881 bytes.\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/mnist.py:267: extract_labels (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use tf.data to implement this functionality.\n","Extracting MNIST_data/train-labels-idx1-ubyte.gz\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/mnist.py:110: dense_to_one_hot (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use tf.one_hot on tensors.\n","Successfully downloaded t10k-images-idx3-ubyte.gz 1648877 bytes.\n","Extracting MNIST_data/t10k-images-idx3-ubyte.gz\n","Successfully downloaded t10k-labels-idx1-ubyte.gz 4542 bytes.\n","Extracting MNIST_data/t10k-labels-idx1-ubyte.gz\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/mnist.py:290: DataSet.__init__ (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use alternatives such as official/mnist/dataset.py from tensorflow/models.\n","\n"," 55000 10000 5000\n","\n","train image shape =  (55000, 784)\n","train label shape =  (55000, 10)\n","test image shape =  (10000, 784)\n","test label shape =  (10000, 10)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"3t3ueKPZ22Gt","colab_type":"code","colab":{}},"source":["# Hyper-Parameter\n","learning_rate = 0.001  # 학습율\n","epochs = 30            # 반복횟수\n","batch_size = 100      # 한번에 입력으로 주어지는 MNIST 개수"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Cstl1CFY22EJ","colab_type":"code","colab":{}},"source":["X = tf.placeholder(tf.float32, [None, 784])  \n","\n","A1 = X_img = tf.reshape(X, [-1, 28, 28, 1])   # image 28X28X1 (black/white)\n","\n","\n","T = tf.placeholder(tf.float32, [None, 10])  "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"siBvpWLV22AG","colab_type":"code","colab":{}},"source":["# 1번째 컨볼루션 층\n","W2 = tf.Variable(tf.random_normal([2, 2, 1, 32], stddev=0.01))  \n","b2 = tf.Variable(tf.constant(0.1, shape=[32]))   \n","\n","# 1번째 컨볼루션 연산을 통해 28 X 28 X1  => 28 X 28 X 32 \n","C2 = tf.nn.conv2d(A1, W2, strides=[1, 1, 1, 1], padding='SAME')\n","\n","# relu\n","Z2 = tf.nn.relu(C2+b2)\n","\n","# 1번째 max pooling을 통해 28 X 28 X 32  => 14 x 14 x 32 \n","A2 = P2 = tf.nn.max_pool(Z2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eaYgTNl2218j","colab_type":"code","colab":{}},"source":["# 2번째 컨볼루션 층, 5X5X32 개 필터\n","W3 = tf.Variable(tf.random_normal([2, 2, 32, 32], stddev=0.01))  \n","b3 = tf.Variable(tf.constant(0.1, shape=[32]))   \n","\n","# 2번째 컨볼루션 연산을 통해 14 X 14 X 32 => 7 X 7 X 32 \n","C3 = tf.nn.conv2d(A2, W3, strides=[1, 1, 1, 1], padding='SAME')\n","\n","# relu\n","Z3 = tf.nn.relu(C3+b3)\n","\n","# 2번째 max pooling을 통해 14 X 14 X 64 => 7 X 7 X 32\n","A3 = P3 = tf.nn.max_pool(Z3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"mSw82kwN21zu","colab_type":"code","colab":{}},"source":["# 7X7 크기를 가진 64개의 activation map을 flatten 시킴\n","A3_flat = P3_flat = tf.reshape(A3, [-1, 7*7*32])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1jYVzAmZ21sP","colab_type":"code","colab":{}},"source":["# 출력층\n","W4 = tf.Variable(tf.random_normal([7*7*32, 10], stddev=0.01))\n","b4 = tf.Variable(tf.random_normal([10]))\n","\n","# 출력층 선형회귀  값 Z4, 즉 softmax 에 들어가는 입력 값\n","Z4 = logits = tf.matmul(A3_flat, W4) + b4    # 선형회귀 값 Z4\n","\n","y = A4 = tf.nn.softmax(Z4)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"cO3FjZji3Z8z","colab_type":"code","colab":{}},"source":["loss = tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits_v2(logits=Z4, labels=T) )\n","\n","optimizer = tf.train.AdamOptimizer(learning_rate)\n","\n","train = optimizer.minimize(loss)  "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1BWPxv3m3Z4R","colab_type":"code","colab":{}},"source":["# batch_size X 10 데이터에 대해 argmax를 통해 행단위로 비교함\n","predicted_val = tf.equal( tf.argmax(A4, 1), tf.argmax(T, 1) )\n","\n","# batch_size X 10 의 True, False 를 1 또는 0 으로 변환\n","accuracy = tf.reduce_mean(tf.cast(predicted_val, dtype=tf.float32))\n","\n","# index list 출력\n","accuracy_index = tf.cast(predicted_val, dtype=tf.float32)\n","\n","# 예측값 처리\n","predicted_list = tf.argmax(A4, 1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"C0yMAJ4Q3Z0I","colab_type":"code","outputId":"dcb84a1c-e4e6-440c-9e39-973c12b86070","executionInfo":{"status":"ok","timestamp":1586263142919,"user_tz":-540,"elapsed":884168,"user":{"displayName":"봉인바지","photoUrl":"","userId":"15851653315678273272"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["index_label_prediction_list = []\n","\n","with  tf.Session()  as sess:\n","    \n","    sess.run(tf.global_variables_initializer())  # 변수 노드(tf.Variable) 초기화\n","    \n","    start_time = datetime.now()\n","    \n","    for i in range(epochs):    # 100 번 반복수행\n","        \n","        total_batch = int(mnist.train.num_examples / batch_size)  # 55,000 / 100\n","\n","        for step in range(total_batch):\n","            \n","            batch_x_data, batch_t_data = mnist.train.next_batch(batch_size)\n","      \n","            loss_val, _ = sess.run([loss, train], feed_dict={X: batch_x_data, T: batch_t_data})    \n","        \n","            if step % 100 == 0:\n","                print(\"epochs = \", i, \", step = \", step, \", loss_val = \", loss_val)             \n","    \n","    end_time = datetime.now() \n","    \n","    print(\"\\nelapsed time = \", end_time - start_time) \n","    \n","    # Accuracy 확인\n","    test_x_data = mnist.test.images    # 10000 X 784\n","    test_t_data = mnist.test.labels    # 10000 X 10\n","    \n","    accuracy_val, predicted_list_val, index_label = sess.run([accuracy, predicted_list, accuracy_index], feed_dict={X: test_x_data, T: test_t_data})\n","    \n","    print(\"\\nAccuracy = \", accuracy_val)\n","    print(\"type(accuracy_val) = \", type(accuracy_val), ', type(predicted_list_val) = ', type(predicted_list_val), ', type(index_label) = ', type(index_label))\n","    print(\"index_label.shape = \", index_label.shape)\n","    \n","    index_label_list = list(index_label)\n","    print(\"length of index_label_list = \", len(index_label_list))\n","    print(\"false label count = \", index_label_list.count([0]))\n","        \n","    \n","    temp_list = [] \n","    \n","    for index in range(len(index_label)):\n","        \n","        if index_label[index] == 0:\n","            \n","            temp_list.append(index)\n","            temp_list.append(np.argmax(test_t_data[index]))  # one-hot encoding 이므로 argmax 로 정답 추출\n","            temp_list.append(predicted_list_val[index])\n","            \n","            index_label_prediction_list.append(temp_list)\n","            \n","            temp_list = []\n","            \n","    print(\"\\nlength of index_label_false_list\", len(index_label_prediction_list))"],"execution_count":16,"outputs":[{"output_type":"stream","text":["epochs =  0 , step =  0 , loss_val =  2.5012672\n","epochs =  0 , step =  100 , loss_val =  2.1431727\n","epochs =  0 , step =  200 , loss_val =  0.4441385\n","epochs =  0 , step =  300 , loss_val =  0.39946416\n","epochs =  0 , step =  400 , loss_val =  0.21230143\n","epochs =  0 , step =  500 , loss_val =  0.25024295\n","epochs =  1 , step =  0 , loss_val =  0.43041715\n","epochs =  1 , step =  100 , loss_val =  0.2653324\n","epochs =  1 , step =  200 , loss_val =  0.274193\n","epochs =  1 , step =  300 , loss_val =  0.2410444\n","epochs =  1 , step =  400 , loss_val =  0.28810808\n","epochs =  1 , step =  500 , loss_val =  0.27792662\n","epochs =  2 , step =  0 , loss_val =  0.2027158\n","epochs =  2 , step =  100 , loss_val =  0.15045877\n","epochs =  2 , step =  200 , loss_val =  0.16195686\n","epochs =  2 , step =  300 , loss_val =  0.053968664\n","epochs =  2 , step =  400 , loss_val =  0.12760416\n","epochs =  2 , step =  500 , loss_val =  0.18618031\n","epochs =  3 , step =  0 , loss_val =  0.18559998\n","epochs =  3 , step =  100 , loss_val =  0.078204446\n","epochs =  3 , step =  200 , loss_val =  0.06624034\n","epochs =  3 , step =  300 , loss_val =  0.07981527\n","epochs =  3 , step =  400 , loss_val =  0.10966958\n","epochs =  3 , step =  500 , loss_val =  0.059623644\n","epochs =  4 , step =  0 , loss_val =  0.19406982\n","epochs =  4 , step =  100 , loss_val =  0.1470353\n","epochs =  4 , step =  200 , loss_val =  0.042915042\n","epochs =  4 , step =  300 , loss_val =  0.15154035\n","epochs =  4 , step =  400 , loss_val =  0.11016222\n","epochs =  4 , step =  500 , loss_val =  0.16816096\n","epochs =  5 , step =  0 , loss_val =  0.02891735\n","epochs =  5 , step =  100 , loss_val =  0.102359\n","epochs =  5 , step =  200 , loss_val =  0.0332561\n","epochs =  5 , step =  300 , loss_val =  0.07205166\n","epochs =  5 , step =  400 , loss_val =  0.11736269\n","epochs =  5 , step =  500 , loss_val =  0.024341973\n","epochs =  6 , step =  0 , loss_val =  0.05076059\n","epochs =  6 , step =  100 , loss_val =  0.09076218\n","epochs =  6 , step =  200 , loss_val =  0.031366818\n","epochs =  6 , step =  300 , loss_val =  0.05081984\n","epochs =  6 , step =  400 , loss_val =  0.04380286\n","epochs =  6 , step =  500 , loss_val =  0.09374485\n","epochs =  7 , step =  0 , loss_val =  0.012423894\n","epochs =  7 , step =  100 , loss_val =  0.035658408\n","epochs =  7 , step =  200 , loss_val =  0.076999985\n","epochs =  7 , step =  300 , loss_val =  0.04603347\n","epochs =  7 , step =  400 , loss_val =  0.03952858\n","epochs =  7 , step =  500 , loss_val =  0.062654436\n","epochs =  8 , step =  0 , loss_val =  0.060528688\n","epochs =  8 , step =  100 , loss_val =  0.052298483\n","epochs =  8 , step =  200 , loss_val =  0.060568105\n","epochs =  8 , step =  300 , loss_val =  0.06546054\n","epochs =  8 , step =  400 , loss_val =  0.017208327\n","epochs =  8 , step =  500 , loss_val =  0.051627625\n","epochs =  9 , step =  0 , loss_val =  0.021260295\n","epochs =  9 , step =  100 , loss_val =  0.07323691\n","epochs =  9 , step =  200 , loss_val =  0.03507171\n","epochs =  9 , step =  300 , loss_val =  0.039792184\n","epochs =  9 , step =  400 , loss_val =  0.0198904\n","epochs =  9 , step =  500 , loss_val =  0.057976007\n","epochs =  10 , step =  0 , loss_val =  0.037970588\n","epochs =  10 , step =  100 , loss_val =  0.045170337\n","epochs =  10 , step =  200 , loss_val =  0.02609298\n","epochs =  10 , step =  300 , loss_val =  0.054443516\n","epochs =  10 , step =  400 , loss_val =  0.18325935\n","epochs =  10 , step =  500 , loss_val =  0.09258669\n","epochs =  11 , step =  0 , loss_val =  0.03583833\n","epochs =  11 , step =  100 , loss_val =  0.038048793\n","epochs =  11 , step =  200 , loss_val =  0.015590319\n","epochs =  11 , step =  300 , loss_val =  0.009981895\n","epochs =  11 , step =  400 , loss_val =  0.083284594\n","epochs =  11 , step =  500 , loss_val =  0.024852114\n","epochs =  12 , step =  0 , loss_val =  0.046038583\n","epochs =  12 , step =  100 , loss_val =  0.042487312\n","epochs =  12 , step =  200 , loss_val =  0.12643264\n","epochs =  12 , step =  300 , loss_val =  0.06648674\n","epochs =  12 , step =  400 , loss_val =  0.0082440935\n","epochs =  12 , step =  500 , loss_val =  0.005718715\n","epochs =  13 , step =  0 , loss_val =  0.02952792\n","epochs =  13 , step =  100 , loss_val =  0.051677532\n","epochs =  13 , step =  200 , loss_val =  0.034801878\n","epochs =  13 , step =  300 , loss_val =  0.009569598\n","epochs =  13 , step =  400 , loss_val =  0.024289262\n","epochs =  13 , step =  500 , loss_val =  0.025423892\n","epochs =  14 , step =  0 , loss_val =  0.016330631\n","epochs =  14 , step =  100 , loss_val =  0.0060327984\n","epochs =  14 , step =  200 , loss_val =  0.1073498\n","epochs =  14 , step =  300 , loss_val =  0.02190979\n","epochs =  14 , step =  400 , loss_val =  0.067265004\n","epochs =  14 , step =  500 , loss_val =  0.016788267\n","epochs =  15 , step =  0 , loss_val =  0.028530208\n","epochs =  15 , step =  100 , loss_val =  0.010226587\n","epochs =  15 , step =  200 , loss_val =  0.023218002\n","epochs =  15 , step =  300 , loss_val =  0.004937802\n","epochs =  15 , step =  400 , loss_val =  0.009868031\n","epochs =  15 , step =  500 , loss_val =  0.066699125\n","epochs =  16 , step =  0 , loss_val =  0.04312738\n","epochs =  16 , step =  100 , loss_val =  0.03472006\n","epochs =  16 , step =  200 , loss_val =  0.024251416\n","epochs =  16 , step =  300 , loss_val =  0.11882791\n","epochs =  16 , step =  400 , loss_val =  0.0023553271\n","epochs =  16 , step =  500 , loss_val =  0.03739954\n","epochs =  17 , step =  0 , loss_val =  0.003125522\n","epochs =  17 , step =  100 , loss_val =  0.067701496\n","epochs =  17 , step =  200 , loss_val =  0.004400678\n","epochs =  17 , step =  300 , loss_val =  0.018908141\n","epochs =  17 , step =  400 , loss_val =  0.10116326\n","epochs =  17 , step =  500 , loss_val =  0.008656379\n","epochs =  18 , step =  0 , loss_val =  0.012822245\n","epochs =  18 , step =  100 , loss_val =  0.038739774\n","epochs =  18 , step =  200 , loss_val =  0.027446305\n","epochs =  18 , step =  300 , loss_val =  0.0063032564\n","epochs =  18 , step =  400 , loss_val =  0.019046413\n","epochs =  18 , step =  500 , loss_val =  0.015736165\n","epochs =  19 , step =  0 , loss_val =  0.01977011\n","epochs =  19 , step =  100 , loss_val =  0.028523393\n","epochs =  19 , step =  200 , loss_val =  0.14394908\n","epochs =  19 , step =  300 , loss_val =  0.017533569\n","epochs =  19 , step =  400 , loss_val =  0.08082251\n","epochs =  19 , step =  500 , loss_val =  0.010353404\n","epochs =  20 , step =  0 , loss_val =  0.016363405\n","epochs =  20 , step =  100 , loss_val =  0.010577544\n","epochs =  20 , step =  200 , loss_val =  0.049082983\n","epochs =  20 , step =  300 , loss_val =  0.053488098\n","epochs =  20 , step =  400 , loss_val =  0.0348279\n","epochs =  20 , step =  500 , loss_val =  0.015776318\n","epochs =  21 , step =  0 , loss_val =  0.01544347\n","epochs =  21 , step =  100 , loss_val =  0.009659166\n","epochs =  21 , step =  200 , loss_val =  0.0029942042\n","epochs =  21 , step =  300 , loss_val =  0.06640325\n","epochs =  21 , step =  400 , loss_val =  0.022683525\n","epochs =  21 , step =  500 , loss_val =  0.008470167\n","epochs =  22 , step =  0 , loss_val =  0.008507415\n","epochs =  22 , step =  100 , loss_val =  0.0058638076\n","epochs =  22 , step =  200 , loss_val =  0.01879252\n","epochs =  22 , step =  300 , loss_val =  0.039266538\n","epochs =  22 , step =  400 , loss_val =  0.008290234\n","epochs =  22 , step =  500 , loss_val =  0.0075760093\n","epochs =  23 , step =  0 , loss_val =  0.012618926\n","epochs =  23 , step =  100 , loss_val =  0.01832397\n","epochs =  23 , step =  200 , loss_val =  0.015625654\n","epochs =  23 , step =  300 , loss_val =  0.0060539083\n","epochs =  23 , step =  400 , loss_val =  0.075018704\n","epochs =  23 , step =  500 , loss_val =  0.015849413\n","epochs =  24 , step =  0 , loss_val =  0.009104628\n","epochs =  24 , step =  100 , loss_val =  0.0027450346\n","epochs =  24 , step =  200 , loss_val =  0.02839561\n","epochs =  24 , step =  300 , loss_val =  0.0090473285\n","epochs =  24 , step =  400 , loss_val =  0.0019226017\n","epochs =  24 , step =  500 , loss_val =  0.0023709154\n","epochs =  25 , step =  0 , loss_val =  0.02402894\n","epochs =  25 , step =  100 , loss_val =  0.006712047\n","epochs =  25 , step =  200 , loss_val =  0.0025595885\n","epochs =  25 , step =  300 , loss_val =  0.0037359\n","epochs =  25 , step =  400 , loss_val =  0.003102025\n","epochs =  25 , step =  500 , loss_val =  0.0020780026\n","epochs =  26 , step =  0 , loss_val =  0.039752606\n","epochs =  26 , step =  100 , loss_val =  0.0030815434\n","epochs =  26 , step =  200 , loss_val =  0.0010192266\n","epochs =  26 , step =  300 , loss_val =  0.0028938244\n","epochs =  26 , step =  400 , loss_val =  0.013515147\n","epochs =  26 , step =  500 , loss_val =  0.0053086784\n","epochs =  27 , step =  0 , loss_val =  0.0065615545\n","epochs =  27 , step =  100 , loss_val =  0.010898931\n","epochs =  27 , step =  200 , loss_val =  0.048507586\n","epochs =  27 , step =  300 , loss_val =  0.021112308\n","epochs =  27 , step =  400 , loss_val =  0.014780198\n","epochs =  27 , step =  500 , loss_val =  0.009405013\n","epochs =  28 , step =  0 , loss_val =  0.06544291\n","epochs =  28 , step =  100 , loss_val =  0.0013174113\n","epochs =  28 , step =  200 , loss_val =  0.006691342\n","epochs =  28 , step =  300 , loss_val =  0.0057745934\n","epochs =  28 , step =  400 , loss_val =  0.012449375\n","epochs =  28 , step =  500 , loss_val =  0.0019615663\n","epochs =  29 , step =  0 , loss_val =  0.004822589\n","epochs =  29 , step =  100 , loss_val =  0.0029713959\n","epochs =  29 , step =  200 , loss_val =  0.02402195\n","epochs =  29 , step =  300 , loss_val =  0.007264693\n","epochs =  29 , step =  400 , loss_val =  0.0067681004\n","epochs =  29 , step =  500 , loss_val =  0.0050544073\n","\n","elapsed time =  0:14:40.277784\n","\n","Accuracy =  0.983\n","type(accuracy_val) =  <class 'numpy.float32'> , type(predicted_list_val) =  <class 'numpy.ndarray'> , type(index_label) =  <class 'numpy.ndarray'>\n","index_label.shape =  (10000,)\n","length of index_label_list =  10000\n","false label count =  170\n","\n","length of index_label_false_list 170\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QzvP3O_03Zu9","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"22mwpxc03Zpf","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1VNj7onp3ZlH","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wGnSay6J3Zcw","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}