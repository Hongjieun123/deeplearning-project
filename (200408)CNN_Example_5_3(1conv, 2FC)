{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"(200408)CNN_Example_5_3(1conv, 2FC)","provenance":[],"authorship_tag":"ABX9TyPt+VVD2YqFJttz6oKgWbXv"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"nP291VGEsiUS","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"abbe3526-4b00-4653-81b1-6f951cb3a9ae","executionInfo":{"status":"ok","timestamp":1586851126194,"user_tz":-540,"elapsed":764,"user":{"displayName":"봉인바지","photoUrl":"","userId":"15851653315678273272"}}},"source":["# colab 에서 tensorflow 1.x 실행\n","%tensorflow_version 1.x"],"execution_count":1,"outputs":[{"output_type":"stream","text":["TensorFlow 1.x selected.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Fna4roEBsoKL","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":685},"outputId":"9de8ebab-fd25-49dc-f8e8-b2175d15efcf","executionInfo":{"status":"ok","timestamp":1586851134298,"user_tz":-540,"elapsed":7369,"user":{"displayName":"봉인바지","photoUrl":"","userId":"15851653315678273272"}}},"source":["import tensorflow as tf\n","from tensorflow.examples.tutorials.mnist import input_data\n","import numpy as np\n","from datetime import datetime      # datetime.now() 를 이용하여 학습 경과 시간 측정\n","\n","# read_data_sets() 를 통해 데이터를 객체형태로 받아오고\n","# one_hot 옵션을 통해 정답(label) 을 one-hot 인코딩된 형태로 받아옴\n","\n","mnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n","\n","# mnist 데이터 셋은 train, test, validation 3개의 데이터 셋으로 구성되어 있으며.\n","# num_examples 값을 통해 데이터의 갯수 확인 가능함\n","\n","print(\"\\n\", mnist.train.num_examples, mnist.test.num_examples, mnist.validation.num_examples)\n","\n","# 데이터는 784(28x28)개의 픽셀을 가지는 이미지와\n","# 10(0~9)개 클래스를 가지는 one-hot 인코딩된 레이블(정답)을 가지고 있음\n","\n","print(\"\\ntrain image shape = \", np.shape(mnist.train.images))\n","print(\"train label shape = \", np.shape(mnist.train.labels))\n","print(\"test image shape = \", np.shape(mnist.test.images))\n","print(\"test label shape = \", np.shape(mnist.test.labels))"],"execution_count":2,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From <ipython-input-2-37edfc5623ff>:9: read_data_sets (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use alternatives such as official/mnist/dataset.py from tensorflow/models.\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/mnist.py:260: maybe_download (from tensorflow.contrib.learn.python.learn.datasets.base) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please write your own downloading logic.\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/base.py:252: _internal_retry.<locals>.wrap.<locals>.wrapped_fn (from tensorflow.contrib.learn.python.learn.datasets.base) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use urllib or similar directly.\n","Successfully downloaded train-images-idx3-ubyte.gz 9912422 bytes.\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/mnist.py:262: extract_images (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use tf.data to implement this functionality.\n","Extracting MNIST_data/train-images-idx3-ubyte.gz\n","Successfully downloaded train-labels-idx1-ubyte.gz 28881 bytes.\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/mnist.py:267: extract_labels (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use tf.data to implement this functionality.\n","Extracting MNIST_data/train-labels-idx1-ubyte.gz\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/mnist.py:110: dense_to_one_hot (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use tf.one_hot on tensors.\n","Successfully downloaded t10k-images-idx3-ubyte.gz 1648877 bytes.\n","Extracting MNIST_data/t10k-images-idx3-ubyte.gz\n","Successfully downloaded t10k-labels-idx1-ubyte.gz 4542 bytes.\n","Extracting MNIST_data/t10k-labels-idx1-ubyte.gz\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/mnist.py:290: DataSet.__init__ (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use alternatives such as official/mnist/dataset.py from tensorflow/models.\n","\n"," 55000 10000 5000\n","\n","train image shape =  (55000, 784)\n","train label shape =  (55000, 10)\n","test image shape =  (10000, 784)\n","test label shape =  (10000, 10)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"KCIEkQNcsoG1","colab_type":"code","colab":{}},"source":["# Hyper-Parameter\n","learning_rate = 0.001  # 학습율\n","epochs = 30            # 반복횟수\n","batch_size = 100      # 한번에 입력으로 주어지는 MNIST 개수"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1Y1rwjpxsoDB","colab_type":"code","colab":{}},"source":["# 입력과 정답을 위한 플레이스홀더 정의\n","X = tf.placeholder(tf.float32, [None, 784])  \n","\n","T = tf.placeholder(tf.float32, [None, 10])  \n","\n","# 입력층의 출력 값. 컨볼루션 연산을 위해 reshape 시킴\n","A1 = X_img = tf.reshape(X, [-1, 28, 28, 1])   # image 28 X 28 X 1 (black/white)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"uFpESjgpsn_j","colab_type":"code","colab":{}},"source":["# 1번째 컨볼루션 층\n","# 3X3 크기를 가지는 32개의 필터를 적용\n","\n","F2 = tf.Variable(tf.random_normal([3, 3, 1, 32], stddev=0.01))  \n","#b2 = tf.Variable(tf.random_normal([32]))   \n","b2 = tf.Variable(tf.constant(0.1, shape=[32]))  \n","\n","# 1번째 컨볼루션 연산을 통해 28 X 28 X1  => 28 X 28 X 32 \n","C2 = tf.nn.conv2d(A1, F2, strides=[1, 1, 1, 1], padding='SAME')\n","\n","# relu\n","Z2 = tf.nn.relu(C2+b2)\n","\n","# 1번째 max pooling을 통해 28 X 28 X32  => 14 X 14 X 32 \n","A2 = P2 = tf.nn.max_pool(Z2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kIRJObOpsn8k","colab_type":"code","colab":{}},"source":["# 14X14 크기를 가진 32개의 activation map을 flatten 시킴\n","A2_flat = P2_flat = tf.reshape(A2, [-1, 32*14*14])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KWyoJjDrsn5n","colab_type":"code","colab":{}},"source":["# 은닉층\n","W3 = tf.Variable(tf.random_normal([32*14*14, 120], stddev=0.01))\n","b3 = tf.Variable(tf.random_normal([120]))\n","\n","\n","Z3 = tf.matmul(A2_flat, W3) + b3    # 선형회귀 값 Z3\n","\n","A3 = tf.nn.relu(Z3)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3t2yE_Ddsn2R","colab_type":"code","colab":{}},"source":["W4 = tf.Variable(tf.random_normal([120, 10], stddev=0.01))\n","b4 = tf.Variable(tf.random_normal([10]))\n","\n","# 출력층 선형회귀  값 Z5, 즉 softmax 에 들어가는 입력 값\n","Z4 = logits = tf.matmul(A3, W4) + b4    # 선형회귀 값 Z6\n","\n","y = A4 = tf.nn.softmax(Z4)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"O552Kvpxtsam","colab_type":"code","colab":{}},"source":["loss = tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits_v2(logits=Z4, labels=T) )\n","\n","optimizer = tf.train.AdamOptimizer(learning_rate)\n","\n","train = optimizer.minimize(loss) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Zvc_jsz9snyp","colab_type":"code","colab":{}},"source":["# batch_size X 10 데이터에 대해 argmax를 통해 행단위로 비교함\n","predicted_val = tf.equal( tf.argmax(A4, 1), tf.argmax(T, 1) )\n","\n","# batch_size X 10 의 True, False 를 1 또는 0 으로 변환\n","accuracy = tf.reduce_mean(tf.cast(predicted_val, dtype=tf.float32))\n","\n","# index list 출력\n","accuracy_index = tf.cast(predicted_val, dtype=tf.float32)\n","\n","# 예측값 처리\n","predicted_list = tf.argmax(A4, 1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"SGKZNjvesnuP","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"1818e741-4951-43f0-fee4-5f6352f8bad3","executionInfo":{"status":"ok","timestamp":1586852174186,"user_tz":-540,"elapsed":738960,"user":{"displayName":"봉인바지","photoUrl":"","userId":"15851653315678273272"}}},"source":["index_label_prediction_list = []\n","\n","with  tf.Session()  as sess:\n","    \n","    sess.run(tf.global_variables_initializer())  # 변수 노드(tf.Variable) 초기화\n","    \n","    start_time = datetime.now()\n","    \n","    for i in range(epochs):    # 30 번 반복수행\n","        \n","        total_batch = int(mnist.train.num_examples / batch_size)  # 55,000 / 100\n","\n","        for step in range(total_batch):\n","            \n","            batch_x_data, batch_t_data = mnist.train.next_batch(batch_size)\n","      \n","            loss_val, _ = sess.run([loss, train], feed_dict={X: batch_x_data, T: batch_t_data})    \n","        \n","            if step % 100 == 0:\n","                print(\"epochs = \", i, \", step = \", step, \", loss_val = \", loss_val)             \n","    \n","    end_time = datetime.now() \n","    \n","    print(\"\\nelapsed time = \", end_time - start_time) \n","    \n","    # Accuracy 확인\n","    test_x_data = mnist.test.images    # 10000 X 784\n","    test_t_data = mnist.test.labels    # 10000 X 10\n","    \n","    accuracy_val, predicted_list_val, index_label = sess.run([accuracy, predicted_list, accuracy_index], feed_dict={X: test_x_data, T: test_t_data})\n","    \n","    print(\"\\nAccuracy = \", accuracy_val)\n","    print(\"type(accuracy_val) = \", type(accuracy_val), ', type(predicted_list_val) = ', type(predicted_list_val), ', type(index_label) = ', type(index_label))\n","    print(\"index_label.shape = \", index_label.shape)\n","    \n","    index_label_list = list(index_label)\n","    print(\"length of index_label_list = \", len(index_label_list))\n","    print(\"false label count = \", index_label_list.count([0]))\n","        \n","    temp_list = [] \n","    \n","    for index in range(len(index_label)):\n","        \n","        if index_label[index] == 0:\n","            \n","            temp_list.append(index)\n","            temp_list.append(np.argmax(test_t_data[index]))  # one-hot encoding 이므로 argmax 로 정답 추출\n","            temp_list.append(predicted_list_val[index])\n","            \n","            index_label_prediction_list.append(temp_list)\n","            \n","            temp_list = []\n","            \n","    print(\"\\nlength of index_label_false_list\", len(index_label_prediction_list))"],"execution_count":14,"outputs":[{"output_type":"stream","text":["epochs =  0 , step =  0 , loss_val =  2.7598658\n","epochs =  0 , step =  100 , loss_val =  2.0169046\n","epochs =  0 , step =  200 , loss_val =  0.37551278\n","epochs =  0 , step =  300 , loss_val =  0.33520448\n","epochs =  0 , step =  400 , loss_val =  0.33432248\n","epochs =  0 , step =  500 , loss_val =  0.2865819\n","epochs =  1 , step =  0 , loss_val =  0.22308873\n","epochs =  1 , step =  100 , loss_val =  0.22335337\n","epochs =  1 , step =  200 , loss_val =  0.24651083\n","epochs =  1 , step =  300 , loss_val =  0.14217144\n","epochs =  1 , step =  400 , loss_val =  0.11314663\n","epochs =  1 , step =  500 , loss_val =  0.17432243\n","epochs =  2 , step =  0 , loss_val =  0.08216673\n","epochs =  2 , step =  100 , loss_val =  0.11453433\n","epochs =  2 , step =  200 , loss_val =  0.07735141\n","epochs =  2 , step =  300 , loss_val =  0.17041719\n","epochs =  2 , step =  400 , loss_val =  0.095486365\n","epochs =  2 , step =  500 , loss_val =  0.14675444\n","epochs =  3 , step =  0 , loss_val =  0.057673723\n","epochs =  3 , step =  100 , loss_val =  0.059106447\n","epochs =  3 , step =  200 , loss_val =  0.032440957\n","epochs =  3 , step =  300 , loss_val =  0.15586205\n","epochs =  3 , step =  400 , loss_val =  0.21563587\n","epochs =  3 , step =  500 , loss_val =  0.09408447\n","epochs =  4 , step =  0 , loss_val =  0.06160705\n","epochs =  4 , step =  100 , loss_val =  0.08595674\n","epochs =  4 , step =  200 , loss_val =  0.09666917\n","epochs =  4 , step =  300 , loss_val =  0.060707126\n","epochs =  4 , step =  400 , loss_val =  0.09260136\n","epochs =  4 , step =  500 , loss_val =  0.026219217\n","epochs =  5 , step =  0 , loss_val =  0.046389427\n","epochs =  5 , step =  100 , loss_val =  0.043449774\n","epochs =  5 , step =  200 , loss_val =  0.19418408\n","epochs =  5 , step =  300 , loss_val =  0.07213511\n","epochs =  5 , step =  400 , loss_val =  0.054757632\n","epochs =  5 , step =  500 , loss_val =  0.08894409\n","epochs =  6 , step =  0 , loss_val =  0.016429199\n","epochs =  6 , step =  100 , loss_val =  0.044390146\n","epochs =  6 , step =  200 , loss_val =  0.04130185\n","epochs =  6 , step =  300 , loss_val =  0.031039381\n","epochs =  6 , step =  400 , loss_val =  0.077609174\n","epochs =  6 , step =  500 , loss_val =  0.010610671\n","epochs =  7 , step =  0 , loss_val =  0.013568396\n","epochs =  7 , step =  100 , loss_val =  0.014173452\n","epochs =  7 , step =  200 , loss_val =  0.04104034\n","epochs =  7 , step =  300 , loss_val =  0.015664589\n","epochs =  7 , step =  400 , loss_val =  0.04682961\n","epochs =  7 , step =  500 , loss_val =  0.040176466\n","epochs =  8 , step =  0 , loss_val =  0.09896456\n","epochs =  8 , step =  100 , loss_val =  0.010996599\n","epochs =  8 , step =  200 , loss_val =  0.06346788\n","epochs =  8 , step =  300 , loss_val =  0.02199655\n","epochs =  8 , step =  400 , loss_val =  0.032382306\n","epochs =  8 , step =  500 , loss_val =  0.028079392\n","epochs =  9 , step =  0 , loss_val =  0.0054214997\n","epochs =  9 , step =  100 , loss_val =  0.026998214\n","epochs =  9 , step =  200 , loss_val =  0.029198356\n","epochs =  9 , step =  300 , loss_val =  0.052817244\n","epochs =  9 , step =  400 , loss_val =  0.07603382\n","epochs =  9 , step =  500 , loss_val =  0.024852557\n","epochs =  10 , step =  0 , loss_val =  0.07130879\n","epochs =  10 , step =  100 , loss_val =  0.0064978073\n","epochs =  10 , step =  200 , loss_val =  0.02243955\n","epochs =  10 , step =  300 , loss_val =  0.007207293\n","epochs =  10 , step =  400 , loss_val =  0.021379564\n","epochs =  10 , step =  500 , loss_val =  0.016963288\n","epochs =  11 , step =  0 , loss_val =  0.006897697\n","epochs =  11 , step =  100 , loss_val =  0.0036911326\n","epochs =  11 , step =  200 , loss_val =  0.022034965\n","epochs =  11 , step =  300 , loss_val =  0.0043349015\n","epochs =  11 , step =  400 , loss_val =  0.011254139\n","epochs =  11 , step =  500 , loss_val =  0.003831608\n","epochs =  12 , step =  0 , loss_val =  0.010060256\n","epochs =  12 , step =  100 , loss_val =  0.00981098\n","epochs =  12 , step =  200 , loss_val =  0.055754513\n","epochs =  12 , step =  300 , loss_val =  0.015904803\n","epochs =  12 , step =  400 , loss_val =  0.021165023\n","epochs =  12 , step =  500 , loss_val =  0.010137119\n","epochs =  13 , step =  0 , loss_val =  0.010972489\n","epochs =  13 , step =  100 , loss_val =  0.0029319809\n","epochs =  13 , step =  200 , loss_val =  0.0055411994\n","epochs =  13 , step =  300 , loss_val =  0.007507152\n","epochs =  13 , step =  400 , loss_val =  0.01851783\n","epochs =  13 , step =  500 , loss_val =  0.016662389\n","epochs =  14 , step =  0 , loss_val =  0.012637594\n","epochs =  14 , step =  100 , loss_val =  0.016121343\n","epochs =  14 , step =  200 , loss_val =  0.0288797\n","epochs =  14 , step =  300 , loss_val =  0.0026189152\n","epochs =  14 , step =  400 , loss_val =  0.01437955\n","epochs =  14 , step =  500 , loss_val =  0.027820973\n","epochs =  15 , step =  0 , loss_val =  0.017820738\n","epochs =  15 , step =  100 , loss_val =  0.004769079\n","epochs =  15 , step =  200 , loss_val =  0.002666871\n","epochs =  15 , step =  300 , loss_val =  0.015602503\n","epochs =  15 , step =  400 , loss_val =  0.023321217\n","epochs =  15 , step =  500 , loss_val =  0.0089370385\n","epochs =  16 , step =  0 , loss_val =  0.01252592\n","epochs =  16 , step =  100 , loss_val =  0.015821071\n","epochs =  16 , step =  200 , loss_val =  0.035772372\n","epochs =  16 , step =  300 , loss_val =  0.0031044504\n","epochs =  16 , step =  400 , loss_val =  0.0042156405\n","epochs =  16 , step =  500 , loss_val =  0.014996955\n","epochs =  17 , step =  0 , loss_val =  0.00065644016\n","epochs =  17 , step =  100 , loss_val =  0.0018330511\n","epochs =  17 , step =  200 , loss_val =  0.003600069\n","epochs =  17 , step =  300 , loss_val =  0.008941582\n","epochs =  17 , step =  400 , loss_val =  0.0070850686\n","epochs =  17 , step =  500 , loss_val =  0.0027486705\n","epochs =  18 , step =  0 , loss_val =  0.0069344854\n","epochs =  18 , step =  100 , loss_val =  0.0008783376\n","epochs =  18 , step =  200 , loss_val =  0.00044687986\n","epochs =  18 , step =  300 , loss_val =  0.00058370194\n","epochs =  18 , step =  400 , loss_val =  0.0022278216\n","epochs =  18 , step =  500 , loss_val =  0.0011540544\n","epochs =  19 , step =  0 , loss_val =  0.004748346\n","epochs =  19 , step =  100 , loss_val =  0.0068135587\n","epochs =  19 , step =  200 , loss_val =  0.0004310799\n","epochs =  19 , step =  300 , loss_val =  0.0015635816\n","epochs =  19 , step =  400 , loss_val =  0.0026236977\n","epochs =  19 , step =  500 , loss_val =  0.041898046\n","epochs =  20 , step =  0 , loss_val =  0.0067714155\n","epochs =  20 , step =  100 , loss_val =  0.009990619\n","epochs =  20 , step =  200 , loss_val =  0.0018090423\n","epochs =  20 , step =  300 , loss_val =  0.0065944223\n","epochs =  20 , step =  400 , loss_val =  0.0064915\n","epochs =  20 , step =  500 , loss_val =  0.007016986\n","epochs =  21 , step =  0 , loss_val =  0.0020699606\n","epochs =  21 , step =  100 , loss_val =  0.0009353309\n","epochs =  21 , step =  200 , loss_val =  0.0017741371\n","epochs =  21 , step =  300 , loss_val =  0.0020992807\n","epochs =  21 , step =  400 , loss_val =  0.00034045725\n","epochs =  21 , step =  500 , loss_val =  0.010190739\n","epochs =  22 , step =  0 , loss_val =  0.0044023064\n","epochs =  22 , step =  100 , loss_val =  0.0003264706\n","epochs =  22 , step =  200 , loss_val =  0.000450605\n","epochs =  22 , step =  300 , loss_val =  0.0031016152\n","epochs =  22 , step =  400 , loss_val =  0.00015575792\n","epochs =  22 , step =  500 , loss_val =  0.004929361\n","epochs =  23 , step =  0 , loss_val =  0.008068586\n","epochs =  23 , step =  100 , loss_val =  0.00029988057\n","epochs =  23 , step =  200 , loss_val =  0.0052764188\n","epochs =  23 , step =  300 , loss_val =  0.0010788887\n","epochs =  23 , step =  400 , loss_val =  0.00046624945\n","epochs =  23 , step =  500 , loss_val =  0.0043806704\n","epochs =  24 , step =  0 , loss_val =  0.0009773185\n","epochs =  24 , step =  100 , loss_val =  0.0019708264\n","epochs =  24 , step =  200 , loss_val =  0.00052932336\n","epochs =  24 , step =  300 , loss_val =  0.00030383322\n","epochs =  24 , step =  400 , loss_val =  0.000100860605\n","epochs =  24 , step =  500 , loss_val =  0.002979362\n","epochs =  25 , step =  0 , loss_val =  0.0005518624\n","epochs =  25 , step =  100 , loss_val =  0.0049123336\n","epochs =  25 , step =  200 , loss_val =  0.0035637242\n","epochs =  25 , step =  300 , loss_val =  0.000832248\n","epochs =  25 , step =  400 , loss_val =  0.005006588\n","epochs =  25 , step =  500 , loss_val =  0.0030151412\n","epochs =  26 , step =  0 , loss_val =  0.002156713\n","epochs =  26 , step =  100 , loss_val =  0.008597807\n","epochs =  26 , step =  200 , loss_val =  0.0002067991\n","epochs =  26 , step =  300 , loss_val =  0.002448495\n","epochs =  26 , step =  400 , loss_val =  0.00017076248\n","epochs =  26 , step =  500 , loss_val =  0.000326746\n","epochs =  27 , step =  0 , loss_val =  6.7058405e-05\n","epochs =  27 , step =  100 , loss_val =  0.00016781394\n","epochs =  27 , step =  200 , loss_val =  0.00030429245\n","epochs =  27 , step =  300 , loss_val =  0.00014845596\n","epochs =  27 , step =  400 , loss_val =  0.0001359031\n","epochs =  27 , step =  500 , loss_val =  0.0004110362\n","epochs =  28 , step =  0 , loss_val =  0.0025561391\n","epochs =  28 , step =  100 , loss_val =  0.0014455979\n","epochs =  28 , step =  200 , loss_val =  0.00430574\n","epochs =  28 , step =  300 , loss_val =  0.012916313\n","epochs =  28 , step =  400 , loss_val =  0.000859554\n","epochs =  28 , step =  500 , loss_val =  0.0014248458\n","epochs =  29 , step =  0 , loss_val =  0.0011451957\n","epochs =  29 , step =  100 , loss_val =  0.0007156402\n","epochs =  29 , step =  200 , loss_val =  0.00018402078\n","epochs =  29 , step =  300 , loss_val =  0.002107682\n","epochs =  29 , step =  400 , loss_val =  0.0005448282\n","epochs =  29 , step =  500 , loss_val =  0.00021658085\n","\n","elapsed time =  0:12:14.208985\n","\n","Accuracy =  0.9865\n","type(accuracy_val) =  <class 'numpy.float32'> , type(predicted_list_val) =  <class 'numpy.ndarray'> , type(index_label) =  <class 'numpy.ndarray'>\n","index_label.shape =  (10000,)\n","length of index_label_list =  10000\n","false label count =  135\n","\n","length of index_label_false_list 135\n"],"name":"stdout"}]}]}