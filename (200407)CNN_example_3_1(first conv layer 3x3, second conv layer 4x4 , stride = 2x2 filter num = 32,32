{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"(200407)CNN_example_3_1(first conv layer 3x3, second conv layer 4x4 , stride = 2x2 filter num = 32,32","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNk6sjBz6TM3RGEs1AhtlY9"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"-_LzEheGs6ro","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"a9ec4319-3703-4ec2-b066-e4a7a60e5610","executionInfo":{"status":"ok","timestamp":1586249828288,"user_tz":-540,"elapsed":1342,"user":{"displayName":"봉인바지","photoUrl":"","userId":"15851653315678273272"}}},"source":["%tensorflow_version 1.x"],"execution_count":1,"outputs":[{"output_type":"stream","text":["TensorFlow 1.x selected.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"0iy8V0dx22K7","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":685},"outputId":"b68d46bb-d059-4a05-e09a-6410a75b3100","executionInfo":{"status":"ok","timestamp":1586249836079,"user_tz":-540,"elapsed":9062,"user":{"displayName":"봉인바지","photoUrl":"","userId":"15851653315678273272"}}},"source":["import tensorflow as tf\n","from tensorflow.examples.tutorials.mnist import input_data\n","import numpy as np\n","from datetime import datetime      # datetime.now() 를 이용하여 학습 경과 시간 측정\n","\n","# read_data_sets() 를 통해 데이터를 객체형태로 받아오고\n","# one_hot 옵션을 통해 정답(label) 을 one-hot 인코딩된 형태로 받아옴\n","\n","mnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n","\n","# mnist 데이터 셋은 train, test, validation 3개의 데이터 셋으로 구성되어 있으며.\n","# num_examples 값을 통해 데이터의 갯수 확인 가능함\n","\n","print(\"\\n\", mnist.train.num_examples, mnist.test.num_examples, mnist.validation.num_examples)\n","\n","# 데이터는 784(28x28)개의 픽셀을 가지는 이미지와\n","# 10(0~9)개 클래스를 가지는 one-hot 인코딩된 레이블(정답)을 가지고 있음\n","\n","print(\"\\ntrain image shape = \", np.shape(mnist.train.images))\n","print(\"train label shape = \", np.shape(mnist.train.labels))\n","print(\"test image shape = \", np.shape(mnist.test.images))\n","print(\"test label shape = \", np.shape(mnist.test.labels))"],"execution_count":2,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From <ipython-input-2-37edfc5623ff>:9: read_data_sets (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use alternatives such as official/mnist/dataset.py from tensorflow/models.\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/mnist.py:260: maybe_download (from tensorflow.contrib.learn.python.learn.datasets.base) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please write your own downloading logic.\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/base.py:252: _internal_retry.<locals>.wrap.<locals>.wrapped_fn (from tensorflow.contrib.learn.python.learn.datasets.base) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use urllib or similar directly.\n","Successfully downloaded train-images-idx3-ubyte.gz 9912422 bytes.\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/mnist.py:262: extract_images (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use tf.data to implement this functionality.\n","Extracting MNIST_data/train-images-idx3-ubyte.gz\n","Successfully downloaded train-labels-idx1-ubyte.gz 28881 bytes.\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/mnist.py:267: extract_labels (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use tf.data to implement this functionality.\n","Extracting MNIST_data/train-labels-idx1-ubyte.gz\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/mnist.py:110: dense_to_one_hot (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use tf.one_hot on tensors.\n","Successfully downloaded t10k-images-idx3-ubyte.gz 1648877 bytes.\n","Extracting MNIST_data/t10k-images-idx3-ubyte.gz\n","Successfully downloaded t10k-labels-idx1-ubyte.gz 4542 bytes.\n","Extracting MNIST_data/t10k-labels-idx1-ubyte.gz\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/mnist.py:290: DataSet.__init__ (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use alternatives such as official/mnist/dataset.py from tensorflow/models.\n","\n"," 55000 10000 5000\n","\n","train image shape =  (55000, 784)\n","train label shape =  (55000, 10)\n","test image shape =  (10000, 784)\n","test label shape =  (10000, 10)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"3t3ueKPZ22Gt","colab_type":"code","colab":{}},"source":["# Hyper-Parameter\n","learning_rate = 0.001  # 학습율\n","epochs = 30            # 반복횟수\n","batch_size = 100      # 한번에 입력으로 주어지는 MNIST 개수"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Cstl1CFY22EJ","colab_type":"code","colab":{}},"source":["X = tf.placeholder(tf.float32, [None, 784])  \n","\n","A1 = X_img = tf.reshape(X, [-1, 28, 28, 1])   # image 28X28X1 (black/white)\n","\n","\n","T = tf.placeholder(tf.float32, [None, 10])  "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"siBvpWLV22AG","colab_type":"code","colab":{}},"source":["# 1번째 컨볼루션 층\n","W2 = tf.Variable(tf.random_normal([3, 3, 1, 32], stddev=0.01))  \n","b2 = tf.Variable(tf.constant(0.1, shape=[32]))   \n","\n","# 1번째 컨볼루션 연산을 통해 28 X 28 X1  => 28 X 28 X 32 \n","C2 = tf.nn.conv2d(A1, W2, strides=[1, 1, 1, 1], padding='SAME')\n","\n","# relu\n","Z2 = tf.nn.relu(C2+b2)\n","\n","# 1번째 max pooling을 통해 28 X 28 X 32  => 14 x 14 x 32 \n","A2 = P2 = tf.nn.max_pool(Z2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eaYgTNl2218j","colab_type":"code","colab":{}},"source":["# 2번째 컨볼루션 층, 5X5X32 개 필터\n","W3 = tf.Variable(tf.random_normal([5, 5, 32, 32], stddev=0.01))  \n","b3 = tf.Variable(tf.constant(0.1, shape=[32]))   \n","\n","# 2번째 컨볼루션 연산을 통해 14 X 14 X 32 => 7 X 7 X 32 \n","C3 = tf.nn.conv2d(A2, W3, strides=[1, 1, 1, 1], padding='SAME')\n","\n","# relu\n","Z3 = tf.nn.relu(C3+b3)\n","\n","# 2번째 max pooling을 통해 14 X 14 X 64 => 7 X 7 X 32\n","A3 = P3 = tf.nn.max_pool(Z3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"mSw82kwN21zu","colab_type":"code","colab":{}},"source":["# 7X7 크기를 가진 64개의 activation map을 flatten 시킴\n","A3_flat = P3_flat = tf.reshape(A3, [-1, 7*7*32])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1jYVzAmZ21sP","colab_type":"code","colab":{}},"source":["# 출력층\n","W4 = tf.Variable(tf.random_normal([7*7*32, 10], stddev=0.01))\n","b4 = tf.Variable(tf.random_normal([10]))\n","\n","# 출력층 선형회귀  값 Z4, 즉 softmax 에 들어가는 입력 값\n","Z4 = logits = tf.matmul(A3_flat, W4) + b4    # 선형회귀 값 Z4\n","\n","y = A4 = tf.nn.softmax(Z4)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"cO3FjZji3Z8z","colab_type":"code","colab":{}},"source":["loss = tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits_v2(logits=Z4, labels=T) )\n","\n","optimizer = tf.train.AdamOptimizer(learning_rate)\n","\n","train = optimizer.minimize(loss)  "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1BWPxv3m3Z4R","colab_type":"code","colab":{}},"source":["# batch_size X 10 데이터에 대해 argmax를 통해 행단위로 비교함\n","predicted_val = tf.equal( tf.argmax(A4, 1), tf.argmax(T, 1) )\n","\n","# batch_size X 10 의 True, False 를 1 또는 0 으로 변환\n","accuracy = tf.reduce_mean(tf.cast(predicted_val, dtype=tf.float32))\n","\n","# index list 출력\n","accuracy_index = tf.cast(predicted_val, dtype=tf.float32)\n","\n","# 예측값 처리\n","predicted_list = tf.argmax(A4, 1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"C0yMAJ4Q3Z0I","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"7e31c8e2-8711-44fe-e50f-2acf64cfebba","executionInfo":{"status":"ok","timestamp":1586252446791,"user_tz":-540,"elapsed":2419907,"user":{"displayName":"봉인바지","photoUrl":"","userId":"15851653315678273272"}}},"source":["index_label_prediction_list = []\n","\n","with  tf.Session()  as sess:\n","    \n","    sess.run(tf.global_variables_initializer())  # 변수 노드(tf.Variable) 초기화\n","    \n","    start_time = datetime.now()\n","    \n","    for i in range(epochs):    # 100 번 반복수행\n","        \n","        total_batch = int(mnist.train.num_examples / batch_size)  # 55,000 / 100\n","\n","        for step in range(total_batch):\n","            \n","            batch_x_data, batch_t_data = mnist.train.next_batch(batch_size)\n","      \n","            loss_val, _ = sess.run([loss, train], feed_dict={X: batch_x_data, T: batch_t_data})    \n","        \n","            if step % 100 == 0:\n","                print(\"epochs = \", i, \", step = \", step, \", loss_val = \", loss_val)             \n","    \n","    end_time = datetime.now() \n","    \n","    print(\"\\nelapsed time = \", end_time - start_time) \n","    \n","    # Accuracy 확인\n","    test_x_data = mnist.test.images    # 10000 X 784\n","    test_t_data = mnist.test.labels    # 10000 X 10\n","    \n","    accuracy_val, predicted_list_val, index_label = sess.run([accuracy, predicted_list, accuracy_index], feed_dict={X: test_x_data, T: test_t_data})\n","    \n","    print(\"\\nAccuracy = \", accuracy_val)\n","    print(\"type(accuracy_val) = \", type(accuracy_val), ', type(predicted_list_val) = ', type(predicted_list_val), ', type(index_label) = ', type(index_label))\n","    print(\"index_label.shape = \", index_label.shape)\n","    \n","    index_label_list = list(index_label)\n","    print(\"length of index_label_list = \", len(index_label_list))\n","    print(\"false label count = \", index_label_list.count([0]))\n","        \n","    \n","    temp_list = [] \n","    \n","    for index in range(len(index_label)):\n","        \n","        if index_label[index] == 0:\n","            \n","            temp_list.append(index)\n","            temp_list.append(np.argmax(test_t_data[index]))  # one-hot encoding 이므로 argmax 로 정답 추출\n","            temp_list.append(predicted_list_val[index])\n","            \n","            index_label_prediction_list.append(temp_list)\n","            \n","            temp_list = []\n","            \n","    print(\"\\nlength of index_label_false_list\", len(index_label_prediction_list))"],"execution_count":16,"outputs":[{"output_type":"stream","text":["epochs =  0 , step =  0 , loss_val =  2.6694899\n","epochs =  0 , step =  100 , loss_val =  1.5312725\n","epochs =  0 , step =  200 , loss_val =  0.322701\n","epochs =  0 , step =  300 , loss_val =  0.19330284\n","epochs =  0 , step =  400 , loss_val =  0.20647967\n","epochs =  0 , step =  500 , loss_val =  0.10159829\n","epochs =  1 , step =  0 , loss_val =  0.085825175\n","epochs =  1 , step =  100 , loss_val =  0.18889214\n","epochs =  1 , step =  200 , loss_val =  0.12071848\n","epochs =  1 , step =  300 , loss_val =  0.12642036\n","epochs =  1 , step =  400 , loss_val =  0.102251045\n","epochs =  1 , step =  500 , loss_val =  0.01694029\n","epochs =  2 , step =  0 , loss_val =  0.15553391\n","epochs =  2 , step =  100 , loss_val =  0.07348783\n","epochs =  2 , step =  200 , loss_val =  0.15382247\n","epochs =  2 , step =  300 , loss_val =  0.092597306\n","epochs =  2 , step =  400 , loss_val =  0.061001074\n","epochs =  2 , step =  500 , loss_val =  0.045491513\n","epochs =  3 , step =  0 , loss_val =  0.056045193\n","epochs =  3 , step =  100 , loss_val =  0.011304337\n","epochs =  3 , step =  200 , loss_val =  0.050921127\n","epochs =  3 , step =  300 , loss_val =  0.04330695\n","epochs =  3 , step =  400 , loss_val =  0.016118834\n","epochs =  3 , step =  500 , loss_val =  0.03745127\n","epochs =  4 , step =  0 , loss_val =  0.022007288\n","epochs =  4 , step =  100 , loss_val =  0.010257482\n","epochs =  4 , step =  200 , loss_val =  0.07314762\n","epochs =  4 , step =  300 , loss_val =  0.014632959\n","epochs =  4 , step =  400 , loss_val =  0.03468462\n","epochs =  4 , step =  500 , loss_val =  0.018717682\n","epochs =  5 , step =  0 , loss_val =  0.030082121\n","epochs =  5 , step =  100 , loss_val =  0.0037538335\n","epochs =  5 , step =  200 , loss_val =  0.069788754\n","epochs =  5 , step =  300 , loss_val =  0.019255225\n","epochs =  5 , step =  400 , loss_val =  0.015740179\n","epochs =  5 , step =  500 , loss_val =  0.040988244\n","epochs =  6 , step =  0 , loss_val =  0.018220479\n","epochs =  6 , step =  100 , loss_val =  0.034402844\n","epochs =  6 , step =  200 , loss_val =  0.014131535\n","epochs =  6 , step =  300 , loss_val =  0.055115126\n","epochs =  6 , step =  400 , loss_val =  0.07670735\n","epochs =  6 , step =  500 , loss_val =  0.04247349\n","epochs =  7 , step =  0 , loss_val =  0.1040911\n","epochs =  7 , step =  100 , loss_val =  0.022083664\n","epochs =  7 , step =  200 , loss_val =  0.018888328\n","epochs =  7 , step =  300 , loss_val =  0.117946155\n","epochs =  7 , step =  400 , loss_val =  0.007584325\n","epochs =  7 , step =  500 , loss_val =  0.06947951\n","epochs =  8 , step =  0 , loss_val =  0.059049215\n","epochs =  8 , step =  100 , loss_val =  0.015948115\n","epochs =  8 , step =  200 , loss_val =  0.009464357\n","epochs =  8 , step =  300 , loss_val =  0.038689286\n","epochs =  8 , step =  400 , loss_val =  0.0024365243\n","epochs =  8 , step =  500 , loss_val =  0.028722595\n","epochs =  9 , step =  0 , loss_val =  0.0012979894\n","epochs =  9 , step =  100 , loss_val =  0.07986909\n","epochs =  9 , step =  200 , loss_val =  0.005126945\n","epochs =  9 , step =  300 , loss_val =  0.002535089\n","epochs =  9 , step =  400 , loss_val =  0.013879644\n","epochs =  9 , step =  500 , loss_val =  0.033146266\n","epochs =  10 , step =  0 , loss_val =  0.051126923\n","epochs =  10 , step =  100 , loss_val =  0.011600656\n","epochs =  10 , step =  200 , loss_val =  0.049605556\n","epochs =  10 , step =  300 , loss_val =  0.031214785\n","epochs =  10 , step =  400 , loss_val =  0.01893641\n","epochs =  10 , step =  500 , loss_val =  0.0004605109\n","epochs =  11 , step =  0 , loss_val =  0.008643873\n","epochs =  11 , step =  100 , loss_val =  0.018042797\n","epochs =  11 , step =  200 , loss_val =  0.0037242763\n","epochs =  11 , step =  300 , loss_val =  0.021767989\n","epochs =  11 , step =  400 , loss_val =  0.041627374\n","epochs =  11 , step =  500 , loss_val =  0.018441228\n","epochs =  12 , step =  0 , loss_val =  0.0015518022\n","epochs =  12 , step =  100 , loss_val =  0.048567545\n","epochs =  12 , step =  200 , loss_val =  0.0063006403\n","epochs =  12 , step =  300 , loss_val =  0.06072634\n","epochs =  12 , step =  400 , loss_val =  0.010201942\n","epochs =  12 , step =  500 , loss_val =  0.003694669\n","epochs =  13 , step =  0 , loss_val =  0.009670295\n","epochs =  13 , step =  100 , loss_val =  0.008695016\n","epochs =  13 , step =  200 , loss_val =  0.00041354555\n","epochs =  13 , step =  300 , loss_val =  0.007682848\n","epochs =  13 , step =  400 , loss_val =  0.02086535\n","epochs =  13 , step =  500 , loss_val =  0.038859345\n","epochs =  14 , step =  0 , loss_val =  0.008638652\n","epochs =  14 , step =  100 , loss_val =  0.0003425442\n","epochs =  14 , step =  200 , loss_val =  0.027483657\n","epochs =  14 , step =  300 , loss_val =  0.0043336246\n","epochs =  14 , step =  400 , loss_val =  0.00065909105\n","epochs =  14 , step =  500 , loss_val =  0.0008481525\n","epochs =  15 , step =  0 , loss_val =  0.012638296\n","epochs =  15 , step =  100 , loss_val =  0.01700023\n","epochs =  15 , step =  200 , loss_val =  0.0044460013\n","epochs =  15 , step =  300 , loss_val =  0.025419407\n","epochs =  15 , step =  400 , loss_val =  0.023225345\n","epochs =  15 , step =  500 , loss_val =  0.0012553832\n","epochs =  16 , step =  0 , loss_val =  0.028865105\n","epochs =  16 , step =  100 , loss_val =  0.0003429398\n","epochs =  16 , step =  200 , loss_val =  0.0037716455\n","epochs =  16 , step =  300 , loss_val =  0.0053335265\n","epochs =  16 , step =  400 , loss_val =  0.0003999187\n","epochs =  16 , step =  500 , loss_val =  0.007446529\n","epochs =  17 , step =  0 , loss_val =  0.016119018\n","epochs =  17 , step =  100 , loss_val =  0.014626464\n","epochs =  17 , step =  200 , loss_val =  0.013502341\n","epochs =  17 , step =  300 , loss_val =  0.009265006\n","epochs =  17 , step =  400 , loss_val =  0.0047921743\n","epochs =  17 , step =  500 , loss_val =  0.06373074\n","epochs =  18 , step =  0 , loss_val =  0.015212614\n","epochs =  18 , step =  100 , loss_val =  0.0056532705\n","epochs =  18 , step =  200 , loss_val =  0.004149573\n","epochs =  18 , step =  300 , loss_val =  0.010151055\n","epochs =  18 , step =  400 , loss_val =  0.01367823\n","epochs =  18 , step =  500 , loss_val =  0.002135007\n","epochs =  19 , step =  0 , loss_val =  0.0050209425\n","epochs =  19 , step =  100 , loss_val =  0.000100562575\n","epochs =  19 , step =  200 , loss_val =  0.0027846664\n","epochs =  19 , step =  300 , loss_val =  0.051394887\n","epochs =  19 , step =  400 , loss_val =  0.0002676221\n","epochs =  19 , step =  500 , loss_val =  0.0038624736\n","epochs =  20 , step =  0 , loss_val =  0.0021266043\n","epochs =  20 , step =  100 , loss_val =  0.03973775\n","epochs =  20 , step =  200 , loss_val =  0.002294513\n","epochs =  20 , step =  300 , loss_val =  0.001801306\n","epochs =  20 , step =  400 , loss_val =  0.016225033\n","epochs =  20 , step =  500 , loss_val =  0.0037330291\n","epochs =  21 , step =  0 , loss_val =  0.00024017264\n","epochs =  21 , step =  100 , loss_val =  0.0037385195\n","epochs =  21 , step =  200 , loss_val =  0.0038618487\n","epochs =  21 , step =  300 , loss_val =  0.0004868832\n","epochs =  21 , step =  400 , loss_val =  0.0019080256\n","epochs =  21 , step =  500 , loss_val =  0.020192655\n","epochs =  22 , step =  0 , loss_val =  0.0040026605\n","epochs =  22 , step =  100 , loss_val =  0.0016474432\n","epochs =  22 , step =  200 , loss_val =  0.0023399948\n","epochs =  22 , step =  300 , loss_val =  0.00034508228\n","epochs =  22 , step =  400 , loss_val =  0.0013857548\n","epochs =  22 , step =  500 , loss_val =  0.000502333\n","epochs =  23 , step =  0 , loss_val =  0.0009469807\n","epochs =  23 , step =  100 , loss_val =  0.0014550344\n","epochs =  23 , step =  200 , loss_val =  0.009393546\n","epochs =  23 , step =  300 , loss_val =  0.0012334862\n","epochs =  23 , step =  400 , loss_val =  0.0007548547\n","epochs =  23 , step =  500 , loss_val =  0.0016554941\n","epochs =  24 , step =  0 , loss_val =  0.009740276\n","epochs =  24 , step =  100 , loss_val =  0.0023232042\n","epochs =  24 , step =  200 , loss_val =  0.0021270767\n","epochs =  24 , step =  300 , loss_val =  0.0012421048\n","epochs =  24 , step =  400 , loss_val =  0.0019104898\n","epochs =  24 , step =  500 , loss_val =  0.00057989475\n","epochs =  25 , step =  0 , loss_val =  0.00029659361\n","epochs =  25 , step =  100 , loss_val =  0.0030460912\n","epochs =  25 , step =  200 , loss_val =  0.0018504881\n","epochs =  25 , step =  300 , loss_val =  0.0043413946\n","epochs =  25 , step =  400 , loss_val =  0.0041251057\n","epochs =  25 , step =  500 , loss_val =  0.00058233563\n","epochs =  26 , step =  0 , loss_val =  0.0018310546\n","epochs =  26 , step =  100 , loss_val =  0.0012338008\n","epochs =  26 , step =  200 , loss_val =  7.515535e-05\n","epochs =  26 , step =  300 , loss_val =  0.015852898\n","epochs =  26 , step =  400 , loss_val =  0.0007416891\n","epochs =  26 , step =  500 , loss_val =  0.011638136\n","epochs =  27 , step =  0 , loss_val =  0.0026012415\n","epochs =  27 , step =  100 , loss_val =  0.004259158\n","epochs =  27 , step =  200 , loss_val =  0.0030698918\n","epochs =  27 , step =  300 , loss_val =  0.0035361869\n","epochs =  27 , step =  400 , loss_val =  0.02906685\n","epochs =  27 , step =  500 , loss_val =  0.0001161023\n","epochs =  28 , step =  0 , loss_val =  0.0010259175\n","epochs =  28 , step =  100 , loss_val =  0.006242354\n","epochs =  28 , step =  200 , loss_val =  8.880058e-05\n","epochs =  28 , step =  300 , loss_val =  0.0014359958\n","epochs =  28 , step =  400 , loss_val =  0.0008319773\n","epochs =  28 , step =  500 , loss_val =  0.00050463225\n","epochs =  29 , step =  0 , loss_val =  0.00016455978\n","epochs =  29 , step =  100 , loss_val =  0.0021803945\n","epochs =  29 , step =  200 , loss_val =  0.000491413\n","epochs =  29 , step =  300 , loss_val =  0.0007596293\n","epochs =  29 , step =  400 , loss_val =  0.00014258291\n","epochs =  29 , step =  500 , loss_val =  0.005451852\n","\n","elapsed time =  0:40:13.847989\n","\n","Accuracy =  0.99\n","type(accuracy_val) =  <class 'numpy.float32'> , type(predicted_list_val) =  <class 'numpy.ndarray'> , type(index_label) =  <class 'numpy.ndarray'>\n","index_label.shape =  (10000,)\n","length of index_label_list =  10000\n","false label count =  100\n","\n","length of index_label_false_list 100\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QzvP3O_03Zu9","colab_type":"code","colab":{}},"source":["# first conv layer 3x3, second conv layer 4x4 , stride = 2x2 filter num = 32,32  Accuracy =  0.99\n","# first conv layer 3x3, second conv layer 4x4 , stride = 2x2, filter num = 32, 64 Accuracy =  0.9905\n","#first conv layer 2x2, second conv layer 2x2 , stride = 2x2, filter num = 32, 32 Accuracy =  0.983\n","# (first conv layer 4x4, second conv layer 5x5 filter num = 32,32) Accuracy =  [0.9903]\n","# first conv layer 4x4, second conv layer 4x4 filter num = 32, 32 Accuracy =  0.9891\n","# 여기서 얻을 수 있는 것은 feature의 크기가 정확도에 영향을 많이 준다는것!!!"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"22mwpxc03Zpf","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1VNj7onp3ZlH","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wGnSay6J3Zcw","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}