{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"(200407)CNN_example_3_1(first conv layer 3x3, second conv layer 4x4 , stride = 2x2, filter num = 32, 128","provenance":[{"file_id":"1ia-AszKr_c59xfr-NH4Y_eComrYh845d","timestamp":1586261275483},{"file_id":"1fhJIvafuijMAZv6GXsW6iMXQPKJyGG80","timestamp":1586257154978}],"authorship_tag":"ABX9TyMj3lRC7HrgRq396VPLhQvO"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"-_LzEheGs6ro","colab_type":"code","outputId":"13c8398a-5edd-4b69-8b8c-83b7ae9b3146","executionInfo":{"status":"ok","timestamp":1586261354513,"user_tz":-540,"elapsed":875,"user":{"displayName":"봉인바지","photoUrl":"","userId":"15851653315678273272"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["%tensorflow_version 1.x"],"execution_count":1,"outputs":[{"output_type":"stream","text":["TensorFlow 1.x selected.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"0iy8V0dx22K7","colab_type":"code","outputId":"597ed8f9-9dbd-45b0-985b-312820643d73","executionInfo":{"status":"ok","timestamp":1586261365364,"user_tz":-540,"elapsed":7698,"user":{"displayName":"봉인바지","photoUrl":"","userId":"15851653315678273272"}},"colab":{"base_uri":"https://localhost:8080/","height":685}},"source":["import tensorflow as tf\n","from tensorflow.examples.tutorials.mnist import input_data\n","import numpy as np\n","from datetime import datetime      # datetime.now() 를 이용하여 학습 경과 시간 측정\n","\n","# read_data_sets() 를 통해 데이터를 객체형태로 받아오고\n","# one_hot 옵션을 통해 정답(label) 을 one-hot 인코딩된 형태로 받아옴\n","\n","mnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n","\n","# mnist 데이터 셋은 train, test, validation 3개의 데이터 셋으로 구성되어 있으며.\n","# num_examples 값을 통해 데이터의 갯수 확인 가능함\n","\n","print(\"\\n\", mnist.train.num_examples, mnist.test.num_examples, mnist.validation.num_examples)\n","\n","# 데이터는 784(28x28)개의 픽셀을 가지는 이미지와\n","# 10(0~9)개 클래스를 가지는 one-hot 인코딩된 레이블(정답)을 가지고 있음\n","\n","print(\"\\ntrain image shape = \", np.shape(mnist.train.images))\n","print(\"train label shape = \", np.shape(mnist.train.labels))\n","print(\"test image shape = \", np.shape(mnist.test.images))\n","print(\"test label shape = \", np.shape(mnist.test.labels))"],"execution_count":2,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From <ipython-input-2-37edfc5623ff>:9: read_data_sets (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use alternatives such as official/mnist/dataset.py from tensorflow/models.\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/mnist.py:260: maybe_download (from tensorflow.contrib.learn.python.learn.datasets.base) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please write your own downloading logic.\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/base.py:252: _internal_retry.<locals>.wrap.<locals>.wrapped_fn (from tensorflow.contrib.learn.python.learn.datasets.base) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use urllib or similar directly.\n","Successfully downloaded train-images-idx3-ubyte.gz 9912422 bytes.\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/mnist.py:262: extract_images (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use tf.data to implement this functionality.\n","Extracting MNIST_data/train-images-idx3-ubyte.gz\n","Successfully downloaded train-labels-idx1-ubyte.gz 28881 bytes.\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/mnist.py:267: extract_labels (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use tf.data to implement this functionality.\n","Extracting MNIST_data/train-labels-idx1-ubyte.gz\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/mnist.py:110: dense_to_one_hot (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use tf.one_hot on tensors.\n","Successfully downloaded t10k-images-idx3-ubyte.gz 1648877 bytes.\n","Extracting MNIST_data/t10k-images-idx3-ubyte.gz\n","Successfully downloaded t10k-labels-idx1-ubyte.gz 4542 bytes.\n","Extracting MNIST_data/t10k-labels-idx1-ubyte.gz\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/mnist.py:290: DataSet.__init__ (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use alternatives such as official/mnist/dataset.py from tensorflow/models.\n","\n"," 55000 10000 5000\n","\n","train image shape =  (55000, 784)\n","train label shape =  (55000, 10)\n","test image shape =  (10000, 784)\n","test label shape =  (10000, 10)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"3t3ueKPZ22Gt","colab_type":"code","colab":{}},"source":["# Hyper-Parameter\n","learning_rate = 0.001  # 학습율\n","epochs = 30            # 반복횟수\n","batch_size = 100      # 한번에 입력으로 주어지는 MNIST 개수"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Cstl1CFY22EJ","colab_type":"code","colab":{}},"source":["X = tf.placeholder(tf.float32, [None, 784])  \n","\n","A1 = X_img = tf.reshape(X, [-1, 28, 28, 1])   # image 28X28X1 (black/white)\n","\n","\n","T = tf.placeholder(tf.float32, [None, 10])  "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"siBvpWLV22AG","colab_type":"code","colab":{}},"source":["# 1번째 컨볼루션 층\n","W2 = tf.Variable(tf.random_normal([3, 3, 1, 32], stddev=0.01))  \n","b2 = tf.Variable(tf.constant(0.1, shape=[32]))   \n","\n","# 1번째 컨볼루션 연산을 통해 28 X 28 X1  => 28 X 28 X 32 \n","C2 = tf.nn.conv2d(A1, W2, strides=[1, 1, 1, 1], padding='SAME')\n","\n","# relu\n","Z2 = tf.nn.relu(C2+b2)\n","\n","# 1번째 max pooling을 통해 28 X 28 X 32  => 14 x 14 x 32 \n","A2 = P2 = tf.nn.max_pool(Z2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eaYgTNl2218j","colab_type":"code","colab":{}},"source":["# 2번째 컨볼루션 층, 5X5X32 개 필터\n","W3 = tf.Variable(tf.random_normal([5, 5, 32, 128], stddev=0.01))  \n","b3 = tf.Variable(tf.constant(0.1, shape=[128]))   \n","\n","# 2번째 컨볼루션 연산을 통해 14 X 14 X 32 => 7 X 7 X 32 \n","C3 = tf.nn.conv2d(A2, W3, strides=[1, 1, 1, 1], padding='SAME')\n","\n","# relu\n","Z3 = tf.nn.relu(C3+b3)\n","\n","# 2번째 max pooling을 통해 14 X 14 X 64 => 7 X 7 X 32\n","A3 = P3 = tf.nn.max_pool(Z3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"mSw82kwN21zu","colab_type":"code","colab":{}},"source":["# 7X7 크기를 가진 64개의 activation map을 flatten 시킴\n","A3_flat = P3_flat = tf.reshape(A3, [-1, 7*7*128])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1jYVzAmZ21sP","colab_type":"code","colab":{}},"source":["# 출력층\n","W4 = tf.Variable(tf.random_normal([7*7*128, 10], stddev=0.01))\n","b4 = tf.Variable(tf.random_normal([10]))\n","\n","# 출력층 선형회귀  값 Z4, 즉 softmax 에 들어가는 입력 값\n","Z4 = logits = tf.matmul(A3_flat, W4) + b4    # 선형회귀 값 Z4\n","\n","y = A4 = tf.nn.softmax(Z4)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"cO3FjZji3Z8z","colab_type":"code","colab":{}},"source":["loss = tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits_v2(logits=Z4, labels=T) )\n","\n","optimizer = tf.train.AdamOptimizer(learning_rate)\n","\n","train = optimizer.minimize(loss)  "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1BWPxv3m3Z4R","colab_type":"code","colab":{}},"source":["# batch_size X 10 데이터에 대해 argmax를 통해 행단위로 비교함\n","predicted_val = tf.equal( tf.argmax(A4, 1), tf.argmax(T, 1) )\n","\n","# batch_size X 10 의 True, False 를 1 또는 0 으로 변환\n","accuracy = tf.reduce_mean(tf.cast(predicted_val, dtype=tf.float32))\n","\n","# index list 출력\n","accuracy_index = tf.cast(predicted_val, dtype=tf.float32)\n","\n","# 예측값 처리\n","predicted_list = tf.argmax(A4, 1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"C0yMAJ4Q3Z0I","colab_type":"code","outputId":"d3a4f7c0-8d10-499b-8103-298ff854e151","executionInfo":{"status":"ok","timestamp":1586267486731,"user_tz":-540,"elapsed":432099,"user":{"displayName":"봉인바지","photoUrl":"","userId":"15851653315678273272"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["index_label_prediction_list = []\n","\n","with  tf.Session()  as sess:\n","    \n","    sess.run(tf.global_variables_initializer())  # 변수 노드(tf.Variable) 초기화\n","    \n","    start_time = datetime.now()\n","    \n","    for i in range(epochs):    # 100 번 반복수행\n","        \n","        total_batch = int(mnist.train.num_examples / batch_size)  # 55,000 / 100\n","\n","        for step in range(total_batch):\n","            \n","            batch_x_data, batch_t_data = mnist.train.next_batch(batch_size)\n","      \n","            loss_val, _ = sess.run([loss, train], feed_dict={X: batch_x_data, T: batch_t_data})    \n","        \n","            if step % 100 == 0:\n","                print(\"epochs = \", i, \", step = \", step, \", loss_val = \", loss_val)             \n","    \n","    end_time = datetime.now() \n","    \n","    print(\"\\nelapsed time = \", end_time - start_time) \n","    \n","    # Accuracy 확인\n","    test_x_data = mnist.test.images    # 10000 X 784\n","    test_t_data = mnist.test.labels    # 10000 X 10\n","    \n","    accuracy_val, predicted_list_val, index_label = sess.run([accuracy, predicted_list, accuracy_index], feed_dict={X: test_x_data, T: test_t_data})\n","    \n","    print(\"\\nAccuracy = \", accuracy_val)\n","    print(\"type(accuracy_val) = \", type(accuracy_val), ', type(predicted_list_val) = ', type(predicted_list_val), ', type(index_label) = ', type(index_label))\n","    print(\"index_label.shape = \", index_label.shape)\n","    \n","    index_label_list = list(index_label)\n","    print(\"length of index_label_list = \", len(index_label_list))\n","    print(\"false label count = \", index_label_list.count([0]))\n","        \n","    \n","    temp_list = [] \n","    \n","    for index in range(len(index_label)):\n","        \n","        if index_label[index] == 0:\n","            \n","            temp_list.append(index)\n","            temp_list.append(np.argmax(test_t_data[index]))  # one-hot encoding 이므로 argmax 로 정답 추출\n","            temp_list.append(predicted_list_val[index])\n","            \n","            index_label_prediction_list.append(temp_list)\n","            \n","            temp_list = []\n","            \n","    print(\"\\nlength of index_label_false_list\", len(index_label_prediction_list))"],"execution_count":18,"outputs":[{"output_type":"stream","text":["epochs =  0 , step =  0 , loss_val =  2.5188825\n","epochs =  0 , step =  100 , loss_val =  0.59090304\n","epochs =  0 , step =  200 , loss_val =  0.20014788\n","epochs =  0 , step =  300 , loss_val =  0.25746036\n","epochs =  0 , step =  400 , loss_val =  0.16972642\n","epochs =  0 , step =  500 , loss_val =  0.11257046\n","epochs =  1 , step =  0 , loss_val =  0.15166748\n","epochs =  1 , step =  100 , loss_val =  0.09593363\n","epochs =  1 , step =  200 , loss_val =  0.104953006\n","epochs =  1 , step =  300 , loss_val =  0.051659573\n","epochs =  1 , step =  400 , loss_val =  0.14268619\n","epochs =  1 , step =  500 , loss_val =  0.05460051\n","epochs =  2 , step =  0 , loss_val =  0.049089834\n","epochs =  2 , step =  100 , loss_val =  0.040852424\n","epochs =  2 , step =  200 , loss_val =  0.042234663\n","epochs =  2 , step =  300 , loss_val =  0.048324052\n","epochs =  2 , step =  400 , loss_val =  0.004942068\n","epochs =  2 , step =  500 , loss_val =  0.049935002\n","epochs =  3 , step =  0 , loss_val =  0.12337787\n","epochs =  3 , step =  100 , loss_val =  0.019360304\n","epochs =  3 , step =  200 , loss_val =  0.026416047\n","epochs =  3 , step =  300 , loss_val =  0.07417647\n","epochs =  3 , step =  400 , loss_val =  0.06738303\n","epochs =  3 , step =  500 , loss_val =  0.10875637\n","epochs =  4 , step =  0 , loss_val =  0.1569395\n","epochs =  4 , step =  100 , loss_val =  0.07240815\n","epochs =  4 , step =  200 , loss_val =  0.0327416\n","epochs =  4 , step =  300 , loss_val =  0.02924484\n","epochs =  4 , step =  400 , loss_val =  0.024772344\n","epochs =  4 , step =  500 , loss_val =  0.031572655\n","epochs =  5 , step =  0 , loss_val =  0.03641771\n","epochs =  5 , step =  100 , loss_val =  0.016904436\n","epochs =  5 , step =  200 , loss_val =  0.0024136782\n","epochs =  5 , step =  300 , loss_val =  0.012388718\n","epochs =  5 , step =  400 , loss_val =  0.005823448\n","epochs =  5 , step =  500 , loss_val =  0.039661862\n","epochs =  6 , step =  0 , loss_val =  0.035375297\n","epochs =  6 , step =  100 , loss_val =  0.01407653\n","epochs =  6 , step =  200 , loss_val =  0.017488413\n","epochs =  6 , step =  300 , loss_val =  0.0060150307\n","epochs =  6 , step =  400 , loss_val =  0.025405206\n","epochs =  6 , step =  500 , loss_val =  0.049556114\n","epochs =  7 , step =  0 , loss_val =  0.041737553\n","epochs =  7 , step =  100 , loss_val =  0.029069345\n","epochs =  7 , step =  200 , loss_val =  0.0047385227\n","epochs =  7 , step =  300 , loss_val =  0.0074753226\n","epochs =  7 , step =  400 , loss_val =  0.0062548653\n","epochs =  7 , step =  500 , loss_val =  0.05913844\n","epochs =  8 , step =  0 , loss_val =  0.01776555\n","epochs =  8 , step =  100 , loss_val =  0.0041259346\n","epochs =  8 , step =  200 , loss_val =  0.027247652\n","epochs =  8 , step =  300 , loss_val =  0.0058214306\n","epochs =  8 , step =  400 , loss_val =  0.022710169\n","epochs =  8 , step =  500 , loss_val =  0.075983584\n","epochs =  9 , step =  0 , loss_val =  0.0031185364\n","epochs =  9 , step =  100 , loss_val =  0.0021053336\n","epochs =  9 , step =  200 , loss_val =  0.044405773\n","epochs =  9 , step =  300 , loss_val =  0.019998971\n","epochs =  9 , step =  400 , loss_val =  0.0080973245\n","epochs =  9 , step =  500 , loss_val =  0.028787173\n","epochs =  10 , step =  0 , loss_val =  0.012579697\n","epochs =  10 , step =  100 , loss_val =  0.0016063639\n","epochs =  10 , step =  200 , loss_val =  0.033291243\n","epochs =  10 , step =  300 , loss_val =  0.005578598\n","epochs =  10 , step =  400 , loss_val =  0.0018110382\n","epochs =  10 , step =  500 , loss_val =  0.0016386706\n","epochs =  11 , step =  0 , loss_val =  0.033542052\n","epochs =  11 , step =  100 , loss_val =  0.036973633\n","epochs =  11 , step =  200 , loss_val =  0.01729107\n","epochs =  11 , step =  300 , loss_val =  0.018205011\n","epochs =  11 , step =  400 , loss_val =  0.0015969964\n","epochs =  11 , step =  500 , loss_val =  0.033508465\n","epochs =  12 , step =  0 , loss_val =  0.03366534\n","epochs =  12 , step =  100 , loss_val =  0.00075261027\n","epochs =  12 , step =  200 , loss_val =  0.0027869134\n","epochs =  12 , step =  300 , loss_val =  0.0057044816\n","epochs =  12 , step =  400 , loss_val =  0.007431221\n","epochs =  12 , step =  500 , loss_val =  0.0012747288\n","epochs =  13 , step =  0 , loss_val =  0.0006772349\n","epochs =  13 , step =  100 , loss_val =  0.014586192\n","epochs =  13 , step =  200 , loss_val =  0.0043798056\n","epochs =  13 , step =  300 , loss_val =  0.0006768413\n","epochs =  13 , step =  400 , loss_val =  0.010660929\n","epochs =  13 , step =  500 , loss_val =  0.058608368\n","epochs =  14 , step =  0 , loss_val =  0.011145476\n","epochs =  14 , step =  100 , loss_val =  0.0054021752\n","epochs =  14 , step =  200 , loss_val =  0.0006373554\n","epochs =  14 , step =  300 , loss_val =  0.035610635\n","epochs =  14 , step =  400 , loss_val =  0.0018687381\n","epochs =  14 , step =  500 , loss_val =  0.0051218783\n","epochs =  15 , step =  0 , loss_val =  0.00022882396\n","epochs =  15 , step =  100 , loss_val =  0.012189098\n","epochs =  15 , step =  200 , loss_val =  0.0016037099\n","epochs =  15 , step =  300 , loss_val =  0.009269875\n","epochs =  15 , step =  400 , loss_val =  0.010465357\n","epochs =  15 , step =  500 , loss_val =  0.0036840886\n","epochs =  16 , step =  0 , loss_val =  0.0016738252\n","epochs =  16 , step =  100 , loss_val =  0.001928347\n","epochs =  16 , step =  200 , loss_val =  0.0010895372\n","epochs =  16 , step =  300 , loss_val =  0.0031508503\n","epochs =  16 , step =  400 , loss_val =  0.12993766\n","epochs =  16 , step =  500 , loss_val =  0.012285505\n","epochs =  17 , step =  0 , loss_val =  0.002265387\n","epochs =  17 , step =  100 , loss_val =  0.026910579\n","epochs =  17 , step =  200 , loss_val =  0.0003013219\n","epochs =  17 , step =  300 , loss_val =  0.001462449\n","epochs =  17 , step =  400 , loss_val =  0.00020046195\n","epochs =  17 , step =  500 , loss_val =  0.0014704174\n","epochs =  18 , step =  0 , loss_val =  0.0017124749\n","epochs =  18 , step =  100 , loss_val =  0.009428436\n","epochs =  18 , step =  200 , loss_val =  0.0016773083\n","epochs =  18 , step =  300 , loss_val =  0.0014642403\n","epochs =  18 , step =  400 , loss_val =  0.04961003\n","epochs =  18 , step =  500 , loss_val =  0.02399914\n","epochs =  19 , step =  0 , loss_val =  0.0007850252\n","epochs =  19 , step =  100 , loss_val =  0.006302371\n","epochs =  19 , step =  200 , loss_val =  0.00032325723\n","epochs =  19 , step =  300 , loss_val =  0.009766544\n","epochs =  19 , step =  400 , loss_val =  6.841885e-05\n","epochs =  19 , step =  500 , loss_val =  0.0013783091\n","epochs =  20 , step =  0 , loss_val =  0.00018877981\n","epochs =  20 , step =  100 , loss_val =  0.0054361452\n","epochs =  20 , step =  200 , loss_val =  0.0011484385\n","epochs =  20 , step =  300 , loss_val =  0.0032605038\n","epochs =  20 , step =  400 , loss_val =  0.00020244993\n","epochs =  20 , step =  500 , loss_val =  0.007147642\n","epochs =  21 , step =  0 , loss_val =  0.00029253692\n","epochs =  21 , step =  100 , loss_val =  0.00233992\n","epochs =  21 , step =  200 , loss_val =  0.0037674468\n","epochs =  21 , step =  300 , loss_val =  0.0025556905\n","epochs =  21 , step =  400 , loss_val =  0.00037107072\n","epochs =  21 , step =  500 , loss_val =  7.55538e-05\n","epochs =  22 , step =  0 , loss_val =  0.0016449615\n","epochs =  22 , step =  100 , loss_val =  9.4118135e-05\n","epochs =  22 , step =  200 , loss_val =  0.013099497\n","epochs =  22 , step =  300 , loss_val =  0.006761597\n","epochs =  22 , step =  400 , loss_val =  0.00080601213\n","epochs =  22 , step =  500 , loss_val =  0.0031507902\n","epochs =  23 , step =  0 , loss_val =  0.0048098965\n","epochs =  23 , step =  100 , loss_val =  0.0038906105\n","epochs =  23 , step =  200 , loss_val =  0.0035570997\n","epochs =  23 , step =  300 , loss_val =  0.0007843913\n","epochs =  23 , step =  400 , loss_val =  0.00023118175\n","epochs =  23 , step =  500 , loss_val =  0.0005828074\n","epochs =  24 , step =  0 , loss_val =  2.3098353e-05\n","epochs =  24 , step =  100 , loss_val =  0.00029044028\n","epochs =  24 , step =  200 , loss_val =  9.447426e-05\n","epochs =  24 , step =  300 , loss_val =  0.0017330294\n","epochs =  24 , step =  400 , loss_val =  0.007919663\n","epochs =  24 , step =  500 , loss_val =  0.0018635989\n","epochs =  25 , step =  0 , loss_val =  0.0011810566\n","epochs =  25 , step =  100 , loss_val =  0.014676324\n","epochs =  25 , step =  200 , loss_val =  0.0005509246\n","epochs =  25 , step =  300 , loss_val =  0.0011572797\n","epochs =  25 , step =  400 , loss_val =  0.0010262023\n","epochs =  25 , step =  500 , loss_val =  0.0005365966\n","epochs =  26 , step =  0 , loss_val =  0.00038305984\n","epochs =  26 , step =  100 , loss_val =  0.00074746006\n","epochs =  26 , step =  200 , loss_val =  0.00010109124\n","epochs =  26 , step =  300 , loss_val =  0.00052607915\n","epochs =  26 , step =  400 , loss_val =  0.0047257286\n","epochs =  26 , step =  500 , loss_val =  8.95129e-05\n","epochs =  27 , step =  0 , loss_val =  7.378157e-06\n","epochs =  27 , step =  100 , loss_val =  0.00031543447\n","epochs =  27 , step =  200 , loss_val =  0.00010694265\n","epochs =  27 , step =  300 , loss_val =  0.00014254439\n","epochs =  27 , step =  400 , loss_val =  3.438475e-05\n","epochs =  27 , step =  500 , loss_val =  0.00076547585\n","epochs =  28 , step =  0 , loss_val =  0.0011017144\n","epochs =  28 , step =  100 , loss_val =  5.7566445e-05\n","epochs =  28 , step =  200 , loss_val =  0.0053532342\n","epochs =  28 , step =  300 , loss_val =  0.018574039\n","epochs =  28 , step =  400 , loss_val =  0.00040271663\n","epochs =  28 , step =  500 , loss_val =  5.640124e-05\n","epochs =  29 , step =  0 , loss_val =  0.0028056516\n","epochs =  29 , step =  100 , loss_val =  0.03727482\n","epochs =  29 , step =  200 , loss_val =  0.010359581\n","epochs =  29 , step =  300 , loss_val =  9.43131e-05\n","epochs =  29 , step =  400 , loss_val =  0.001337036\n","epochs =  29 , step =  500 , loss_val =  0.00087815674\n","\n","elapsed time =  1:24:37.444894\n","\n","Accuracy =  0.9904\n","type(accuracy_val) =  <class 'numpy.float32'> , type(predicted_list_val) =  <class 'numpy.ndarray'> , type(index_label) =  <class 'numpy.ndarray'>\n","index_label.shape =  (10000,)\n","length of index_label_list =  10000\n","false label count =  96\n","\n","length of index_label_false_list 96\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QzvP3O_03Zu9","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"22mwpxc03Zpf","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1VNj7onp3ZlH","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wGnSay6J3Zcw","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}