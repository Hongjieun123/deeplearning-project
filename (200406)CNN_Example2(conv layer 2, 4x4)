{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"(200406)CNN_Example2(conv layer 2, 4x4)","provenance":[],"authorship_tag":"ABX9TyO46lgGjYXvblAYKufCe1LY"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"RfvqjpjYctYZ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"4ed37028-f063-48fb-d7a0-935d235ba4c7","executionInfo":{"status":"ok","timestamp":1586226218481,"user_tz":-540,"elapsed":806,"user":{"displayName":"봉인바지","photoUrl":"","userId":"15851653315678273272"}}},"source":["%tensorflow_version 1.x"],"execution_count":1,"outputs":[{"output_type":"stream","text":["TensorFlow 1.x selected.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"8Tc1qKUBczht","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":685},"outputId":"7b223d7b-b1ce-4c93-9d3c-bab549f2e220","executionInfo":{"status":"ok","timestamp":1586226232587,"user_tz":-540,"elapsed":7471,"user":{"displayName":"봉인바지","photoUrl":"","userId":"15851653315678273272"}}},"source":["import tensorflow as tf\n","from tensorflow.examples.tutorials.mnist import input_data\n","import numpy as np\n","from datetime import datetime      # datetime.now() 를 이용하여 학습 경과 시간 측정\n","\n","# read_data_sets() 를 통해 데이터를 객체형태로 받아오고\n","# one_hot 옵션을 통해 정답(label) 을 one-hot 인코딩된 형태로 받아옴\n","\n","mnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n","\n","# mnist 데이터 셋은 train, test, validation 3개의 데이터 셋으로 구성되어 있으며.\n","# num_examples 값을 통해 데이터의 갯수 확인 가능함\n","\n","print(\"\\n\", mnist.train.num_examples, mnist.test.num_examples, mnist.validation.num_examples)\n","\n","# 데이터는 784(28x28)개의 픽셀을 가지는 이미지와\n","# 10(0~9)개 클래스를 가지는 one-hot 인코딩된 레이블(정답)을 가지고 있음\n","\n","print(\"\\ntrain image shape = \", np.shape(mnist.train.images))\n","print(\"train label shape = \", np.shape(mnist.train.labels))\n","print(\"test image shape = \", np.shape(mnist.test.images))\n","print(\"test label shape = \", np.shape(mnist.test.labels))"],"execution_count":2,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From <ipython-input-2-37edfc5623ff>:9: read_data_sets (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use alternatives such as official/mnist/dataset.py from tensorflow/models.\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/mnist.py:260: maybe_download (from tensorflow.contrib.learn.python.learn.datasets.base) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please write your own downloading logic.\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/base.py:252: _internal_retry.<locals>.wrap.<locals>.wrapped_fn (from tensorflow.contrib.learn.python.learn.datasets.base) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use urllib or similar directly.\n","Successfully downloaded train-images-idx3-ubyte.gz 9912422 bytes.\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/mnist.py:262: extract_images (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use tf.data to implement this functionality.\n","Extracting MNIST_data/train-images-idx3-ubyte.gz\n","Successfully downloaded train-labels-idx1-ubyte.gz 28881 bytes.\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/mnist.py:267: extract_labels (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use tf.data to implement this functionality.\n","Extracting MNIST_data/train-labels-idx1-ubyte.gz\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/mnist.py:110: dense_to_one_hot (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use tf.one_hot on tensors.\n","Successfully downloaded t10k-images-idx3-ubyte.gz 1648877 bytes.\n","Extracting MNIST_data/t10k-images-idx3-ubyte.gz\n","Successfully downloaded t10k-labels-idx1-ubyte.gz 4542 bytes.\n","Extracting MNIST_data/t10k-labels-idx1-ubyte.gz\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/contrib/learn/python/learn/datasets/mnist.py:290: DataSet.__init__ (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use alternatives such as official/mnist/dataset.py from tensorflow/models.\n","\n"," 55000 10000 5000\n","\n","train image shape =  (55000, 784)\n","train label shape =  (55000, 10)\n","test image shape =  (10000, 784)\n","test label shape =  (10000, 10)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"V5jpFepQc4Ot","colab_type":"code","colab":{}},"source":["learning_rate = 0.001  # 학습율\n","epochs = 30            # 반복횟수\n","batch_size = 100   "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"nMv6ta6uc4YE","colab_type":"code","colab":{}},"source":["X = tf.placeholder(tf.float32, [None, 784])  \n","\n","A1 = X_img = tf.reshape(X, [-1, 28, 28, 1])   # image 28X28X1 (black/white)\n","\n","\n","T = tf.placeholder(tf.float32, [None, 10])  "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dfO1Pnkfc4a8","colab_type":"code","colab":{}},"source":["W2 = tf.Variable(tf.random_normal([3, 3, 1, 32], stddev=0.01))  \n","b2 = tf.Variable(tf.constant(0.1, shape=[32]))   \n","\n","# 1번째 컨볼루션 연산을 통해 28 X 28 X1  => 28 X 28 X 32 \n","C2 = tf.nn.conv2d(A1, W2, strides=[1, 1, 1, 1], padding='SAME')\n","\n","# relu\n","Z2 = tf.nn.relu(C2+b2)\n","\n","# 1번째 max pooling을 통해 28 X 28 X 32  => 14 X 14 X 32 \n","A2 = P2 = tf.nn.max_pool(Z2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5-poI3dXc4dh","colab_type":"code","colab":{}},"source":["W3 = tf.Variable(tf.random_normal([4, 4, 32, 128], stddev=0.01))  \n","b3 = tf.Variable(tf.constant(0.1, shape=[128]))   \n","\n","# 2번째 컨볼루션 연산을 통해 14 X 14 X 32 => 14 X 14 X 32 \n","C3 = tf.nn.conv2d(A2, W3, strides=[1, 1, 1, 1], padding='SAME')\n","\n","# relu\n","Z3 = tf.nn.relu(C3+b3)\n","\n","# 2번째 max pooling을 통해 14 X 14 X 64 => 7 X 7 X 32\n","A3 = P3 = tf.nn.max_pool(Z3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eJb5kVYEc4ga","colab_type":"code","colab":{}},"source":["A3_flat = P3_flat = tf.reshape(A3, [-1, 7*7*128])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KEvjDcE3c4il","colab_type":"code","colab":{}},"source":["W4 = tf.Variable(tf.random_normal([7*7*128, 10], stddev=0.01))\n","b4 = tf.Variable(tf.random_normal([10]))\n","\n","# 출력층 선형회귀  값 Z4, 즉 softmax 에 들어가는 입력 값\n","Z4 = logits = tf.matmul(A3_flat, W4) + b4    # 선형회귀 값 Z4\n","\n","y = A4 = tf.nn.softmax(Z4)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KSjckOYHc4nv","colab_type":"code","colab":{}},"source":["loss = tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits_v2(logits=Z4, labels=T) )\n","\n","optimizer = tf.train.AdamOptimizer(learning_rate)\n","\n","train = optimizer.minimize(loss)  "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RtRMhIzDc4lq","colab_type":"code","colab":{}},"source":["predicted_val = tf.equal( tf.argmax(A4, 1), tf.argmax(T, 1) )\n","\n","# batch_size X 10 의 True, False 를 1 또는 0 으로 변환\n","accuracy = tf.reduce_mean(tf.cast(predicted_val, dtype=tf.float32))\n","\n","# index list 출력\n","accuracy_index = tf.cast(predicted_val, dtype=tf.float32)\n","\n","# 예측값 처리\n","predicted_list = tf.argmax(A4, 1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"QDsvAPXsczrg","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"ef4ff79f-d8be-4a5f-c38e-4bbf73098c66","executionInfo":{"status":"ok","timestamp":1586230118170,"user_tz":-540,"elapsed":3754862,"user":{"displayName":"봉인바지","photoUrl":"","userId":"15851653315678273272"}}},"source":["index_label_prediction_list = []\n","\n","with  tf.Session()  as sess:\n","    \n","    sess.run(tf.global_variables_initializer())  # 변수 노드(tf.Variable) 초기화\n","    \n","    start_time = datetime.now()\n","    \n","    for i in range(epochs):    # 100 번 반복수행\n","        \n","        total_batch = int(mnist.train.num_examples / batch_size)  # 55,000 / 100\n","\n","        for step in range(total_batch):\n","            \n","            batch_x_data, batch_t_data = mnist.train.next_batch(batch_size)\n","      \n","            loss_val, _ = sess.run([loss, train], feed_dict={X: batch_x_data, T: batch_t_data})    \n","        \n","            if step % 100 == 0:\n","                print(\"epochs = \", i, \", step = \", step, \", loss_val = \", loss_val)             \n","    \n","    end_time = datetime.now() \n","    \n","    print(\"\\nelapsed time = \", end_time - start_time) \n","    \n","    # Accuracy 확인\n","    test_x_data = mnist.test.images    # 10000 X 784\n","    test_t_data = mnist.test.labels    # 10000 X 10\n","    \n","    accuracy_val, predicted_list_val, index_label = sess.run([accuracy, predicted_list, accuracy_index], feed_dict={X: test_x_data, T: test_t_data})\n","    \n","    print(\"\\nAccuracy = \", accuracy_val)\n","    print(\"type(accuracy_val) = \", type(accuracy_val), ', type(predicted_list_val) = ', type(predicted_list_val), ', type(index_label) = ', type(index_label))\n","    print(\"index_label.shape = \", index_label.shape)\n","    \n","    index_label_list = list(index_label)\n","    print(\"length of index_label_list = \", len(index_label_list))\n","    print(\"false label count = \", index_label_list.count([0]))\n","        \n","    \n","    temp_list = [] \n","    \n","    for index in range(len(index_label)):\n","        \n","        if index_label[index] == 0:\n","            \n","            temp_list.append(index)\n","            temp_list.append(np.argmax(test_t_data[index]))  # one-hot encoding 이므로 argmax 로 정답 추출\n","            temp_list.append(predicted_list_val[index])\n","            \n","            index_label_prediction_list.append(temp_list)\n","            \n","            temp_list = []\n","            \n","    print(\"\\nlength of index_label_false_list\", len(index_label_prediction_list))"],"execution_count":14,"outputs":[{"output_type":"stream","text":["epochs =  0 , step =  0 , loss_val =  2.5608902\n","epochs =  0 , step =  100 , loss_val =  0.54345626\n","epochs =  0 , step =  200 , loss_val =  0.18905964\n","epochs =  0 , step =  300 , loss_val =  0.06788868\n","epochs =  0 , step =  400 , loss_val =  0.14623813\n","epochs =  0 , step =  500 , loss_val =  0.17973077\n","epochs =  1 , step =  0 , loss_val =  0.20692505\n","epochs =  1 , step =  100 , loss_val =  0.12606503\n","epochs =  1 , step =  200 , loss_val =  0.051586967\n","epochs =  1 , step =  300 , loss_val =  0.19436298\n","epochs =  1 , step =  400 , loss_val =  0.07226779\n","epochs =  1 , step =  500 , loss_val =  0.04654943\n","epochs =  2 , step =  0 , loss_val =  0.1961826\n","epochs =  2 , step =  100 , loss_val =  0.09653111\n","epochs =  2 , step =  200 , loss_val =  0.048302576\n","epochs =  2 , step =  300 , loss_val =  0.014123298\n","epochs =  2 , step =  400 , loss_val =  0.09612104\n","epochs =  2 , step =  500 , loss_val =  0.08316741\n","epochs =  3 , step =  0 , loss_val =  0.016568346\n","epochs =  3 , step =  100 , loss_val =  0.056400925\n","epochs =  3 , step =  200 , loss_val =  0.13486476\n","epochs =  3 , step =  300 , loss_val =  0.026511302\n","epochs =  3 , step =  400 , loss_val =  0.03224511\n","epochs =  3 , step =  500 , loss_val =  0.012803159\n","epochs =  4 , step =  0 , loss_val =  0.013016738\n","epochs =  4 , step =  100 , loss_val =  0.06944446\n","epochs =  4 , step =  200 , loss_val =  0.0867516\n","epochs =  4 , step =  300 , loss_val =  0.03684907\n","epochs =  4 , step =  400 , loss_val =  0.002683376\n","epochs =  4 , step =  500 , loss_val =  0.023561768\n","epochs =  5 , step =  0 , loss_val =  0.0193587\n","epochs =  5 , step =  100 , loss_val =  0.048464462\n","epochs =  5 , step =  200 , loss_val =  0.05529456\n","epochs =  5 , step =  300 , loss_val =  0.023759313\n","epochs =  5 , step =  400 , loss_val =  0.04653416\n","epochs =  5 , step =  500 , loss_val =  0.0073578535\n","epochs =  6 , step =  0 , loss_val =  0.027973242\n","epochs =  6 , step =  100 , loss_val =  0.02594167\n","epochs =  6 , step =  200 , loss_val =  0.100095555\n","epochs =  6 , step =  300 , loss_val =  0.050414562\n","epochs =  6 , step =  400 , loss_val =  0.025694301\n","epochs =  6 , step =  500 , loss_val =  0.027209375\n","epochs =  7 , step =  0 , loss_val =  0.015727041\n","epochs =  7 , step =  100 , loss_val =  0.043994807\n","epochs =  7 , step =  200 , loss_val =  0.019563593\n","epochs =  7 , step =  300 , loss_val =  0.030587723\n","epochs =  7 , step =  400 , loss_val =  0.021203296\n","epochs =  7 , step =  500 , loss_val =  0.047475196\n","epochs =  8 , step =  0 , loss_val =  0.039344467\n","epochs =  8 , step =  100 , loss_val =  0.0030575723\n","epochs =  8 , step =  200 , loss_val =  0.005466497\n","epochs =  8 , step =  300 , loss_val =  0.0014296495\n","epochs =  8 , step =  400 , loss_val =  0.022303998\n","epochs =  8 , step =  500 , loss_val =  0.01642665\n","epochs =  9 , step =  0 , loss_val =  0.0024184312\n","epochs =  9 , step =  100 , loss_val =  0.002881992\n","epochs =  9 , step =  200 , loss_val =  0.0042733066\n","epochs =  9 , step =  300 , loss_val =  0.0090467045\n","epochs =  9 , step =  400 , loss_val =  0.012615722\n","epochs =  9 , step =  500 , loss_val =  0.09112824\n","epochs =  10 , step =  0 , loss_val =  0.009060781\n","epochs =  10 , step =  100 , loss_val =  0.0033846719\n","epochs =  10 , step =  200 , loss_val =  0.0118174385\n","epochs =  10 , step =  300 , loss_val =  0.037694197\n","epochs =  10 , step =  400 , loss_val =  0.036934294\n","epochs =  10 , step =  500 , loss_val =  0.059096143\n","epochs =  11 , step =  0 , loss_val =  0.005011159\n","epochs =  11 , step =  100 , loss_val =  0.0018159249\n","epochs =  11 , step =  200 , loss_val =  0.003878058\n","epochs =  11 , step =  300 , loss_val =  0.0010481636\n","epochs =  11 , step =  400 , loss_val =  0.0010555882\n","epochs =  11 , step =  500 , loss_val =  0.01487057\n","epochs =  12 , step =  0 , loss_val =  0.010723647\n","epochs =  12 , step =  100 , loss_val =  0.02386123\n","epochs =  12 , step =  200 , loss_val =  0.0074062883\n","epochs =  12 , step =  300 , loss_val =  0.02746629\n","epochs =  12 , step =  400 , loss_val =  0.00067103945\n","epochs =  12 , step =  500 , loss_val =  0.0013196032\n","epochs =  13 , step =  0 , loss_val =  0.0052392245\n","epochs =  13 , step =  100 , loss_val =  0.019473922\n","epochs =  13 , step =  200 , loss_val =  0.0048894417\n","epochs =  13 , step =  300 , loss_val =  0.018197274\n","epochs =  13 , step =  400 , loss_val =  0.0014813871\n","epochs =  13 , step =  500 , loss_val =  0.0045095175\n","epochs =  14 , step =  0 , loss_val =  0.002544026\n","epochs =  14 , step =  100 , loss_val =  0.021364657\n","epochs =  14 , step =  200 , loss_val =  0.0035427848\n","epochs =  14 , step =  300 , loss_val =  0.0068521267\n","epochs =  14 , step =  400 , loss_val =  0.002534184\n","epochs =  14 , step =  500 , loss_val =  0.009399029\n","epochs =  15 , step =  0 , loss_val =  0.002230019\n","epochs =  15 , step =  100 , loss_val =  0.050600532\n","epochs =  15 , step =  200 , loss_val =  0.004283835\n","epochs =  15 , step =  300 , loss_val =  0.04265198\n","epochs =  15 , step =  400 , loss_val =  0.006176318\n","epochs =  15 , step =  500 , loss_val =  0.025823506\n","epochs =  16 , step =  0 , loss_val =  0.005898841\n","epochs =  16 , step =  100 , loss_val =  0.0012156202\n","epochs =  16 , step =  200 , loss_val =  0.011311713\n","epochs =  16 , step =  300 , loss_val =  0.059281524\n","epochs =  16 , step =  400 , loss_val =  0.003669588\n","epochs =  16 , step =  500 , loss_val =  0.0024096158\n","epochs =  17 , step =  0 , loss_val =  0.0013788408\n","epochs =  17 , step =  100 , loss_val =  0.0009233389\n","epochs =  17 , step =  200 , loss_val =  0.03599477\n","epochs =  17 , step =  300 , loss_val =  0.0012058606\n","epochs =  17 , step =  400 , loss_val =  0.02841552\n","epochs =  17 , step =  500 , loss_val =  0.01208221\n","epochs =  18 , step =  0 , loss_val =  0.0041930373\n","epochs =  18 , step =  100 , loss_val =  0.0014493288\n","epochs =  18 , step =  200 , loss_val =  0.003969495\n","epochs =  18 , step =  300 , loss_val =  0.008641941\n","epochs =  18 , step =  400 , loss_val =  0.0042166403\n","epochs =  18 , step =  500 , loss_val =  0.034419313\n","epochs =  19 , step =  0 , loss_val =  0.0091016935\n","epochs =  19 , step =  100 , loss_val =  0.004523488\n","epochs =  19 , step =  200 , loss_val =  0.00020859655\n","epochs =  19 , step =  300 , loss_val =  0.0006047033\n","epochs =  19 , step =  400 , loss_val =  0.0019974473\n","epochs =  19 , step =  500 , loss_val =  0.04038023\n","epochs =  20 , step =  0 , loss_val =  0.0028907456\n","epochs =  20 , step =  100 , loss_val =  0.00025709902\n","epochs =  20 , step =  200 , loss_val =  0.0015013851\n","epochs =  20 , step =  300 , loss_val =  0.010406091\n","epochs =  20 , step =  400 , loss_val =  0.015933216\n","epochs =  20 , step =  500 , loss_val =  0.005445769\n","epochs =  21 , step =  0 , loss_val =  0.0006933507\n","epochs =  21 , step =  100 , loss_val =  0.00059067993\n","epochs =  21 , step =  200 , loss_val =  0.007909875\n","epochs =  21 , step =  300 , loss_val =  0.0050446335\n","epochs =  21 , step =  400 , loss_val =  0.018808423\n","epochs =  21 , step =  500 , loss_val =  0.04456796\n","epochs =  22 , step =  0 , loss_val =  0.020236796\n","epochs =  22 , step =  100 , loss_val =  0.0049700015\n","epochs =  22 , step =  200 , loss_val =  0.0030094176\n","epochs =  22 , step =  300 , loss_val =  0.0055330624\n","epochs =  22 , step =  400 , loss_val =  0.0004075823\n","epochs =  22 , step =  500 , loss_val =  0.001621564\n","epochs =  23 , step =  0 , loss_val =  0.0005485358\n","epochs =  23 , step =  100 , loss_val =  0.0018561705\n","epochs =  23 , step =  200 , loss_val =  0.00051416014\n","epochs =  23 , step =  300 , loss_val =  0.000429311\n","epochs =  23 , step =  400 , loss_val =  0.0019605362\n","epochs =  23 , step =  500 , loss_val =  0.0021813584\n","epochs =  24 , step =  0 , loss_val =  0.000951823\n","epochs =  24 , step =  100 , loss_val =  0.0001493445\n","epochs =  24 , step =  200 , loss_val =  0.0001479751\n","epochs =  24 , step =  300 , loss_val =  0.0001764611\n","epochs =  24 , step =  400 , loss_val =  0.018548103\n","epochs =  24 , step =  500 , loss_val =  0.0002777935\n","epochs =  25 , step =  0 , loss_val =  0.0008092482\n","epochs =  25 , step =  100 , loss_val =  0.0012778001\n","epochs =  25 , step =  200 , loss_val =  0.0002198355\n","epochs =  25 , step =  300 , loss_val =  0.015758917\n","epochs =  25 , step =  400 , loss_val =  0.017017532\n","epochs =  25 , step =  500 , loss_val =  0.000612637\n","epochs =  26 , step =  0 , loss_val =  0.0025856057\n","epochs =  26 , step =  100 , loss_val =  6.923206e-05\n","epochs =  26 , step =  200 , loss_val =  0.0024090337\n","epochs =  26 , step =  300 , loss_val =  0.0005751357\n","epochs =  26 , step =  400 , loss_val =  0.01053307\n","epochs =  26 , step =  500 , loss_val =  0.0042239917\n","epochs =  27 , step =  0 , loss_val =  0.0012651476\n","epochs =  27 , step =  100 , loss_val =  0.0018429221\n","epochs =  27 , step =  200 , loss_val =  0.00297451\n","epochs =  27 , step =  300 , loss_val =  0.01172251\n","epochs =  27 , step =  400 , loss_val =  0.0022919273\n","epochs =  27 , step =  500 , loss_val =  0.00013180707\n","epochs =  28 , step =  0 , loss_val =  0.0013009168\n","epochs =  28 , step =  100 , loss_val =  0.0015431364\n","epochs =  28 , step =  200 , loss_val =  0.0019599947\n","epochs =  28 , step =  300 , loss_val =  0.023654578\n","epochs =  28 , step =  400 , loss_val =  0.0048142127\n","epochs =  28 , step =  500 , loss_val =  0.0011091287\n","epochs =  29 , step =  0 , loss_val =  0.0012904893\n","epochs =  29 , step =  100 , loss_val =  0.00014762666\n","epochs =  29 , step =  200 , loss_val =  0.0014536062\n","epochs =  29 , step =  300 , loss_val =  0.00082518114\n","epochs =  29 , step =  400 , loss_val =  3.243251e-05\n","epochs =  29 , step =  500 , loss_val =  0.0013423446\n","\n","elapsed time =  1:02:26.683072\n","\n","Accuracy =  0.9885\n","type(accuracy_val) =  <class 'numpy.float32'> , type(predicted_list_val) =  <class 'numpy.ndarray'> , type(index_label) =  <class 'numpy.ndarray'>\n","index_label.shape =  (10000,)\n","length of index_label_list =  10000\n","false label count =  115\n","\n","length of index_label_false_list 115\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GIFw__gKczxj","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"nLyOVK3Ncz08","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kddFF5ascz4b","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MUYZgZOscu4I","colab_type":"text"},"source":[""]}]}